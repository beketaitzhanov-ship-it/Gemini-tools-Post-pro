import os
import psycopg2
import json
from dotenv import load_dotenv

load_dotenv()
DATABASE_URL = os.getenv('DATABASE_URL')

if not DATABASE_URL:
    raise Exception("–û—à–∏–±–∫–∞: DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ .env —Ñ–∞–π–ª–µ.")

def migrate_t1_rates(cursor, t1_rates_data):
    print("üöö –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é T1_RATES_DENSITY...")
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    cursor.execute("DELETE FROM t1_rates")

    sql = "INSERT INTO t1_rates (category_name, min_density, price, unit) VALUES (%s, %s, %s, %s)"
    count = 0
    for category, rules in t1_rates_data.items():
        for rule in rules:
            cursor.execute(sql, (category, rule['min_density'], rule['price'], rule['unit']))
            count += 1
    print(f"‚úÖ T1_RATES: {count} –ø—Ä–∞–≤–∏–ª —Ç–∞—Ä–∏—Ñ–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ.")

def migrate_cities(cursor, cities_data):
    print("üöö –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é DESTINATION_ZONES...")
    cursor.execute("DELETE FROM cities")

    sql = "INSERT INTO cities (city_name, zone) VALUES (%s, %s)"
    count = 0
    for city, zone in cities_data.items():
        cursor.execute(sql, (city, str(zone))) # –ü—Ä–∏–≤–æ–¥–∏–º –∑–æ–Ω—É –∫ —Å—Ç—Ä–æ–∫–µ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        count += 1
    print(f"‚úÖ CITIES: {count} –≥–æ—Ä–æ–¥–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ.")

def migrate_t2_rates(cursor, t2_data):
    print("üöö –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é T2_RATES_DETAILED...")
    cursor.execute("DELETE FROM t2_rates")
    cursor.execute("DELETE FROM t2_rates_extra")

    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–∞–±–ª–∏—Ü—É —Å –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º–∏ –≤–µ—Å–∞
    sql_t2 = """
    INSERT INTO t2_rates (max_weight, zone_1_cost, zone_2_cost, zone_3_cost, zone_4_cost, zone_5_cost) 
    VALUES (%s, %s, %s, %s, %s, %s)
    """
    ranges = t2_data.get('large_parcel', {}).get('weight_ranges', [])
    count = 0
    for r in ranges:
        z = r['zones']
        cursor.execute(sql_t2, (r['max'], z['1'], z['2'], z['3'], z['4'], z['5']))
        count += 1
    print(f"‚úÖ T2_RATES: {count} –≤–µ—Å–æ–≤—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ.")

    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ç–∞—Ä–∏—Ñ—ã –∑–∞ –¥–æ–ø. –∫–≥
    sql_extra = "INSERT INTO t2_rates_extra (zone, extra_kg_rate) VALUES (%s, %s)"
    extra = t2_data.get('large_parcel', {}).get('extra_kg_rate', {})
    count = 0
    for zone, rate in extra.items():
        cursor.execute(sql_extra, (zone, rate))
        count += 1
    print(f"‚úÖ T2_RATES_EXTRA: {count} —Ç–∞—Ä–∏—Ñ–æ–≤ –∑–∞ –¥–æ–ø. –∫–≥ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ.")

def migrate_settings(cursor, exchange_rate_data):
    print("üöö –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é EXCHANGE_RATE...")
    cursor.execute("DELETE FROM settings WHERE key = 'exchange_rate'")
    sql = "INSERT INTO settings (key, value) VALUES (%s, %s)"
    cursor.execute(sql, ('exchange_rate', exchange_rate_data.get('rate', 550)))
    print(f"‚úÖ SETTINGS: –ö—É—Ä—Å –≤–∞–ª—é—Ç {exchange_rate_data.get('rate', 550)} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

def migrate_shipments(cursor, shipment_file_path):
    print(f"üöö –ù–∞—á–∏–Ω–∞—é –º–∏–≥—Ä–∞—Ü–∏—é –≥—Ä—É–∑–æ–≤ –∏–∑ {shipment_file_path}...")
    try:
        with open(shipment_file_path, 'r', encoding='utf-8') as f:
            shipment_data = json.load(f)
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {shipment_file_path}: {e}")
        return

    sql = """
    INSERT INTO shipments (track_number, fio, phone, product, weight, volume, status, route_progress, warehouse_code, manager, created_at) 
    VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
    ON CONFLICT (track_number) DO UPDATE SET
        fio = EXCLUDED.fio,
        phone = EXCLUDED.phone,
        product = EXCLUDED.product,
        weight = EXCLUDED.weight,
        volume = EXCLUDED.volume,
        status = EXCLUDED.status,
        route_progress = EXCLUDED.route_progress,
        manager = EXCLUDED.manager,
        created_at = EXCLUDED.created_at;
    """
    count = 0
    for track, data in shipment_data.items():
        cursor.execute(sql, (
            track,
            data.get('fio'),
            data.get('phone'),
            data.get('product'),
            data.get('weight'),
            data.get('volume'),
            data.get('status'),
            data.get('route_progress'),
            data.get('warehouse', 'GZ'), # –ë–µ—Ä–µ–º 'GZ' –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            data.get('manager'),
            data.get('created_at')
        ))
        count += 1
    print(f"‚úÖ SHIPMENTS: {count} –≥—Ä—É–∑–æ–≤ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ/–æ–±–Ω–æ–≤–ª–µ–Ω–æ.")

# --- –ì–õ–ê–í–ù–´–ô –ó–ê–ü–£–°–ö –ú–ò–ì–†–ê–¶–ò–ò ---
conn = None
try:
    conn = psycopg2.connect(DATABASE_URL)
    cursor = conn.cursor()
    print("‚úÖ [Migrate] –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Render...")

    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º config.json
    with open('config.json', 'r', encoding='utf-8') as f:
        config = json.load(f)

    # 2. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ —á–∞—Å—Ç—è–º
    migrate_t1_rates(cursor, config.get("T1_RATES_DENSITY", {}))
    migrate_cities(cursor, config.get("DESTINATION_ZONES", {}))
    migrate_t2_rates(cursor, config.get("T2_RATES_DETAILED", {}))
    migrate_settings(cursor, config.get("EXCHANGE_RATE", {}))

    # 3. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≥—Ä—É–∑–æ–≤
    # !! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–µ—Ä–Ω—ã–π !!
    migrate_shipments(cursor, 'guangzhou_track_data.json')
    # (–ö–æ–≥–¥–∞ –ø–æ—è–≤—è—Ç—Å—è –¥—Ä—É–≥–∏–µ —Å–∫–ª–∞–¥—ã, –º—ã –¥–æ–±–∞–≤–∏–º –∏—Ö —Å—é–¥–∞ –∂–µ)

    # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    conn.commit()
    print("üéâüéâüéâ –£–°–ü–ï–•! –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ PostgreSQL –Ω–∞ Render!")

except Exception as e:
    print(f"‚ùå‚ùå‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ú–ò–ì–†–ê–¶–ò–ò: {e}")
    if conn:
        conn.rollback()
finally:
    if conn:
        cursor.close()
        conn.close()
        print("üîå [Migrate] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ.")