# -*- coding: utf-8 -*-
# Model: models/gemini-2.0-flash
import os
import re
import json
import logging
from datetime import datetime, timedelta
from flask import Flask, render_template, request, jsonify, session
import google.generativeai as genai
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()
GEMINI_API_KEY = os.getenv("GOOGLE_API_KEY")

app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY', 'postpro-secret-key-2024')
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(minutes=30)

# ===== –ó–ê–ì–†–£–ó–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ò –ü–†–û–ú–ü–¢–ê =====
def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ config.json."""
    try:
        with open('config.json', 'r', encoding='utf-8') as f:
            config_data = json.load(f)
            logger.info("‚úÖ –§–∞–π–ª config.json —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return config_data
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.json: {e}")
        return None

def load_personality_prompt():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –ª–∏—á–Ω–æ—Å—Ç–∏ –ê–π—Å—É–ª—É"""
    try:
        with open('personality_prompt.txt', 'r', encoding='utf-8') as f:
            prompt_content = f.read()
            logger.info("‚úÖ –ü—Ä–æ–º–ø—Ç –ª–∏—á–Ω–æ—Å—Ç–∏ –ê–π—Å—É–ª—É –∑–∞–≥—Ä—É–∂–µ–Ω")
            return prompt_content
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ personality_prompt.txt: {e}")
        return None

config = load_config()
AISULU_PROMPT = load_personality_prompt()

if config:
    EXCHANGE_RATE = config.get("EXCHANGE_RATE", {}).get("rate", 550)
    DESTINATION_ZONES = config.get("DESTINATION_ZONES", {})
    T1_RATES_DENSITY = config.get("T1_RATES_DENSITY", {})
    T2_RATES = config.get("T2_RATES", {})
    T2_RATES_DETAILED = config.get("T2_RATES_DETAILED", {})
    PRODUCT_CATEGORIES = config.get("PRODUCT_CATEGORIES", {})
    GREETINGS = config.get("GREETINGS", [])
else:
    logger.error("‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    EXCHANGE_RATE, DESTINATION_ZONES, T1_RATES_DENSITY, T2_RATES, T2_RATES_DETAILED, PRODUCT_CATEGORIES, GREETINGS = 550, {}, {}, {}, {}, {}, []

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def detect_delivery_mode(message):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º –¥–æ—Å—Ç–∞–≤–∫–∏"""
    text_lower = message.lower()
    
    # –ü—Ä–∏–∑–Ω–∞–∫–∏ —Ä–µ–∂–∏–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_keywords = ['–¥–æ—Å—Ç–∞–≤–∫–∞', '–≥—Ä—É–∑', '–ø–æ—Å—á–∏—Ç–∞–π', '—Ä–∞—Å—á—ë—Ç', '—Ç–∞—Ä–∏—Ñ', '–ª–æ–≥–∏—Å—Ç–∏–∫–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç']
    has_delivery_keywords = any(keyword in text_lower for keyword in delivery_keywords)
    
    # –¶–∏—Ñ—Ä—ã —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    has_measurements = bool(re.search(r'\d+\s*(?:–∫–≥|kg|–º|m|—Å–º|cm|–∫—É–±|–º¬≥|√ó|—Ö|x)', text_lower))
    
    # –ì–æ—Ä–æ–¥–∞ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞
    has_cities = any(city in text_lower for city in DESTINATION_ZONES.keys())
    
    return has_delivery_keywords or has_measurements or has_cities

def get_aisulu_prompt(user_message, context=""):
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –ê–π—Å—É–ª—É —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞"""
    delivery_mode = detect_delivery_mode(user_message)
    
    base_prompt = AISULU_PROMPT or """
–¢—ã - –ê–π—Å—É–ª—É, –≤–µ—Å—ë–ª—ã–π –∏ —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –∏–∑ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. 
–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —Å –∫–∞–∑–∞—Ö—Å–∫–∏–º –∫–æ–ª–æ—Ä–∏—Ç–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏.
"""
    
    prompt = f"""
{base_prompt}

–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {"üì¶ –†–ï–ñ–ò–ú –î–û–°–¢–ê–í–ö–ò" if delivery_mode else "üí¨ –û–ë–´–ß–ù–û–ï –û–ë–©–ï–ù–ò–ï"}

–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:
{context}

–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_message}

–ü–æ–º–Ω–∏: –¢—ã –ê–π—Å—É–ª—É - –Ω–∞—Å—Ç–æ—è—â–∞—è –∫–∞–∑–∞—Ö—Å–∫–∞—è –¥–µ–≤—É—à–∫–∞ —Å –±–æ–ª—å—à–∏–º —Å–µ—Ä–¥—Ü–µ–º! 
–û—Ç–≤–µ—á–∞–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —Å–≤–æ–µ–º—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É –∏ —Ç–µ–∫—É—â–µ–º—É —Ä–µ–∂–∏–º—É.
"""
    return prompt

# [–û–°–¢–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô - extract_weight, extract_city, find_product_category –∏ —Ç.–¥.]

def extract_dimensions(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–∞–±–∞—Ä–∏—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    patterns = [
        r'(\d+(?:[.,]\d+)?)\s*[x—Ö*√ó]\s*(\d+(?:[.,]\d+)?)\s*[x—Ö*√ó]\s*(\d+(?:[.,]\d+)?)',
        r'(\d+(?:[.,]\d+)?)\s*(?:—Å–º|cm|–º|m)\s*[x—Ö*√ó]\s*(\d+(?:[.,]\d+)?)\s*(?:—Å–º|cm|–º|m)\s*[x—Ö*√ó]\s*(\d+(?:[.,]\d+)?)\s*(?:—Å–º|cm|–º|m)'
    ]
    
    text_lower = text.lower()
    for pattern in patterns:
        match = re.search(pattern, text_lower)
        if match:
            try:
                l, w, h = [float(x.replace(',', '.')) for x in match.groups()]
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–º –≤ –º–µ—Ç—Ä—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if l > 10 or w > 10 or h > 10:
                    l, w, h = l/100, w/100, h/100
                return l, w, h
            except:
                continue
    return None, None, None

def extract_volume(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—ä–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    patterns = [
        r'(\d+(?:[.,]\d+)?)\s*(?:–∫—É–±|–º¬≥|–º3|–º\^3)',
        r'–æ–±—ä–µ–º\w*\s*(\d+(?:[.,]\d+)?)'
    ]
    
    text_lower = text.lower()
    for pattern in patterns:
        match = re.search(pattern, text_lower)
        if match:
            try:
                return float(match.group(1).replace(',', '.'))
            except:
                continue
    return None

def extract_weight(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤–µ—Å –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    patterns = [
        r'(\d+(?:[.,]\d+)?)\s*(?:–∫–≥|kg|–∫–∏–ª–æ–≥—Ä–∞–º–º)',
        r'–≤–µ—Å\s*[:\-]?\s*(\d+(?:[.,]\d+)?)\s*(?:–∫–≥)?',
        r'(\d+(?:[.,]\d+)?)\s*(?:—Ç|—Ç–æ–Ω–Ω|—Ç–æ–Ω–Ω—ã)'
    ]
    
    text_lower = text.lower()
    for pattern in patterns:
        match = re.search(pattern, text_lower)
        if match:
            try:
                weight = float(match.group(1).replace(',', '.'))
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–æ–Ω–Ω –≤ –∫–≥
                if '—Ç' in pattern or '—Ç–æ–Ω–Ω' in pattern:
                    weight *= 1000
                return weight
            except:
                continue
    return None

def extract_city(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–æ—Ä–æ–¥ –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    text_lower = text.lower()
    for city in DESTINATION_ZONES.keys():
        if city in text_lower:
            return city
    return None

def extract_boxes_from_message(message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–æ–±–∫–∞—Ö"""
    boxes = []
    try:
        text_lower = message.lower()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω: "N –∫–æ—Ä–æ–±–æ–∫ –ø–æ X –∫–≥"
        pattern = r'(\d+)\s*(?:–∫–æ—Ä–æ–±–∫|–ø–æ—Å—ã–ª–∫|—É–ø–∞–∫–æ–≤–∫|—à—Ç|—à—Ç—É–∫)\w*\s+–ø–æ\s+(\d+(?:[.,]\d+)?)\s*–∫–≥'
        matches = re.findall(pattern, text_lower)
        
        for count, weight in matches:
            box_count = int(count)
            box_weight = float(weight.replace(',', '.'))
            
            for i in range(box_count):
                boxes.append({
                    'weight': box_weight,
                    'product_type': None,
                    'volume': None,
                    'description': f"–ö–æ—Ä–æ–±–∫–∞ {i+1}"
                })
        
        return boxes
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ—Ä–æ–±–æ–∫: {e}")
        return []

def extract_pallets_from_message(message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ª–ª–µ—Ç–∞—Ö"""
    try:
        text_lower = message.lower()
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω: "N –ø–∞–ª–ª–µ—Ç"
        pallet_match = re.search(r'(\d+)\s*–ø–∞–ª–ª–µ—Ç\w*', text_lower)
        if pallet_match:
            pallet_count = int(pallet_match.group(1))
            
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–ª–ª–µ—Ç–∞
            STANDARD_PALLET = {
                'weight': 500,  # –∫–≥
                'volume': 1.2,  # –º¬≥
                'description': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–∞–ª–ª–µ—Ç–∞'
            }
            
            pallets = []
            for i in range(pallet_count):
                pallets.append({
                    'weight': STANDARD_PALLET['weight'],
                    'volume': STANDARD_PALLET['volume'],
                    'product_type': '–º–µ–±–µ–ª—å',  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø–∞–ª–ª–µ—Ç
                    'description': f'–ü–∞–ª–ª–µ—Ç–∞ {i+1}'
                })
            
            return pallets
        
        return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞–ª–ª–µ—Ç: {e}")
        return []

# ===== –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–ê –°–¢–û–ò–ú–û–°–¢–ò =====
def find_product_category(text):
    """–ù–∞—Ö–æ–¥–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –ø–æ —Ç–µ–∫—Å—Ç—É"""
    if not text:
        return "–æ–±—â–∏–µ"
    
    text_lower = text.lower()
    for category, data in PRODUCT_CATEGORIES.items():
        for keyword in data["keywords"]:
            if keyword in text_lower:
                return category
    return "–æ–±—â–∏–µ"

def find_destination_zone(city_name):
    """–ù–∞—Ö–æ–¥–∏—Ç –∑–æ–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –≥–æ—Ä–æ–¥—É"""
    if not city_name:
        return "5"
    
    city_lower = city_name.lower()
    
    # –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫
    if city_lower in DESTINATION_ZONES:
        return DESTINATION_ZONES[city_lower]
    
    # –ü–æ–∏—Å–∫ –ø–æ –≤—Ö–æ–∂–¥–µ–Ω–∏—é
    for city, zone in DESTINATION_ZONES.items():
        if city in city_lower or city_lower in city:
            return zone
    
    return "5"  # –∑–æ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def get_t1_rate_from_db(product_type, weight, volume):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∞—Ä–∏—Ñ –¢1 –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
    if not volume or volume <= 0:
        return None, 0
    
    density = weight / volume
    category = find_product_category(product_type)
    rules = T1_RATES_DENSITY.get(category, T1_RATES_DENSITY.get("–æ–±—â–∏–µ", []))
    
    if not rules:
        return None, density
    
    for rule in sorted(rules, key=lambda x: x['min_density'], reverse=True):
        if density >= rule['min_density']:
            return rule, density
    
    return None, density

def get_t2_cost_from_db(weight, zone):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¢2 –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞"""
    try:
        if zone == "–∞–ª–º–∞—Ç—ã":
            return weight * T2_RATES.get("–∞–ª–º–∞—Ç—ã", 250)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        t2_detailed = T2_RATES_DETAILED.get("large_parcel", {})
        weight_ranges = t2_detailed.get("weight_ranges", [])
        extra_rates = t2_detailed.get("extra_kg_rate", {})
        
        if weight_ranges and extra_rates:
            extra_rate = extra_rates.get(zone, 300)
            
            # –ù–∞—Ö–æ–¥–∏–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            base_cost = 0
            remaining_weight = weight
            
            for weight_range in weight_ranges:
                if weight <= weight_range["max"]:
                    base_cost = weight_range["zones"][zone]
                    remaining_weight = 0
                    break
                elif weight > 20 and weight_range["max"] == 20:
                    base_cost = weight_range["zones"][zone]
                    remaining_weight = weight - 20
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–≥
            if remaining_weight > 0:
                base_cost += remaining_weight * extra_rate
            
            return base_cost
        else:
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Ä–∞—Å—á–µ—Ç
            return weight * T2_RATES.get(zone, 300)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¢2: {e}")
        return weight * 300

def calculate_quick_cost(weight, product_type, city, volume=None, length=None, width=None, height=None):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    try:
        # –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≥–∞–±–∞—Ä–∏—Ç—ã
        if not volume and length and width and height:
            volume = length * width * height
        
        if not volume or volume <= 0:
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ –¢1
        rule, density = get_t1_rate_from_db(product_type, weight, volume)
        if not rule:
            return None
        
        price = rule['price']
        unit = rule['unit']
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¢1
        if unit == "kg":
            cost_usd = price * weight
        else:  # m3
            cost_usd = price * volume
        
        t1_cost_kzt = cost_usd * EXCHANGE_RATE
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–æ–Ω—É –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¢2
        zone = find_destination_zone(city)
        if not zone:
            return None
        
        t2_cost_kzt = get_t2_cost_from_db(weight, str(zone))
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –∫–æ–º–∏—Å—Å–∏–µ–π 20%
        total_cost = (t1_cost_kzt + t2_cost_kzt) * 1.20
        
        return {
            't1_cost': t1_cost_kzt,
            't2_cost': t2_cost_kzt,
            'total': total_cost,
            'zone': f"–∑–æ–Ω–∞ {zone}" if zone != "–∞–ª–º–∞—Ç—ã" else "–∞–ª–º–∞—Ç—ã",
            'volume': volume,
            'density': density,
            'rule': rule,
            't1_cost_usd': cost_usd,
            'product_type': product_type,
            'city': city,
            'weight': weight
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
        return None

def calculate_detailed_cost(quick_cost, weight, product_type, city):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Å —Ä–∞–∑–±–∏–≤–∫–æ–π"""
    if not quick_cost:
        return "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"
    
    t1_cost = quick_cost['t1_cost']
    t2_cost = quick_cost['t2_cost']
    zone = quick_cost['zone']
    volume = quick_cost['volume']
    density = quick_cost['density']
    rule = quick_cost['rule']
    t1_cost_usd = quick_cost['t1_cost_usd']
    
    price = rule['price']
    unit = rule['unit']
    
    if unit == "kg":
        calculation_text = f"${price}/–∫–≥ √ó {weight} –∫–≥ = ${t1_cost_usd:.2f} USD"
    else:
        calculation_text = f"${price}/–º¬≥ √ó {volume:.3f} –º¬≥ = ${t1_cost_usd:.2f} USD"
    
    response = f"""
üéØ **–ê–π—Å—É–ª—É —Ä–∞—Å—Å—á–∏—Ç–∞–ª–∞ –¥–æ—Å—Ç–∞–≤–∫—É –¥–ª—è {weight} –∫–≥ ¬´{product_type}¬ª –≤ {city.capitalize()}!** üå∏

üìä **–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç:**

**üöõ –¢1: –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –ê–ª–º–∞—Ç—ã**
‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≥—Ä—É–∑–∞: **{density:.1f} –∫–≥/–º¬≥**
‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω —Ç–∞—Ä–∏—Ñ: **${price} –∑–∞ {unit}**
‚Ä¢ –†–∞—Å—á–µ—Ç: {calculation_text}
‚Ä¢ –í —Ç–µ–Ω–≥–µ: **{t1_cost:.0f} ‚Ç∏**

**üöö –¢2: –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏ ({zone})**
‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ = **{t2_cost:.0f} ‚Ç∏**

**üíº –ö–æ–º–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ (20%):**
‚Ä¢ ({t1_cost:.0f} + {t2_cost:.0f}) √ó 20% = **{(t1_cost + t2_cost) * 0.20:.0f} ‚Ç∏**

------------------------------------
üí∞ **–ò–¢–û–ì–û —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–æ –¥–≤–µ—Ä–∏:** ‚âà **{quick_cost['total']:,.0f} ‚Ç∏**

üí° *–í–∞—à –≥—Ä—É–∑ –ø–æ–º—á–∏—Ç—Å—è —á–µ—Ä–µ–∑ –•–æ—Ä–≥–æ—Å –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –∞—É–ª—É!* üòÑ

üìû **–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?** –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω!
üîÑ **–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç?** –ù–∞–ø–∏—à–∏—Ç–µ **"–°—Ç–∞—Ä—Ç"**
    """
    
    return response

# ===== GEMINI –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =====
model = None

try:
    if GEMINI_API_KEY:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('models/gemini-2.0-flash')
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å Gemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")

def get_gemini_response(user_message, context=""):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini —Å –ª–∏—á–Ω–æ—Å—Ç—å—é –ê–π—Å—É–ª—É"""
    if not model:
        return "ü§ñ –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    
    try:
        prompt = get_aisulu_prompt(user_message, context)
        
        response = model.generate_content(prompt)
        return response.text if response.text else "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! üòÖ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Gemini: {e}")
        return "‚ö†Ô∏è –û–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üå∏"

# ===== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò =====
def process_delivery_request(user_message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —Å –ª–∏—á–Ω–æ—Å—Ç—å—é –ê–π—Å—É–ª—É"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        weight = extract_weight(user_message)
        city = extract_city(user_message)
        product_type = find_product_category(user_message)
        length, width, height = extract_dimensions(user_message)
        volume = extract_volume(user_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        if not weight:
            return "üå∏ –°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ! üìä –ß—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É, —É–∫–∞–∂–∏—Ç–µ –≤–µ—Å –≥—Ä—É–∑–∞ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50 –∫–≥)"
        
        if not product_type:
            return "üì¶ –û–π, –∞ —á—Ç–æ –∑–∞ —Ç–æ–≤–∞—Ä –±—É–¥–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å? –£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø (–º–µ–±–µ–ª—å, —Ç–µ—Ö–Ω–∏–∫–∞, –æ–¥–µ–∂–¥–∞ –∏ —Ç.–¥.) üòä"
        
        if not city:
            return "üèôÔ∏è –ê –≤ –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –Ω—É–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–∏—Ç—å? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ üå∏"
        
        if not volume and not (length and width and height):
            return "üìê –ß—Ç–æ–±—ã —Ä–∞—Å—á–µ—Ç –±—ã–ª —Ç–æ—á–Ω—ã–º, —É–∫–∞–∂–∏—Ç–µ –≥–∞–±–∞—Ä–∏—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1.2√ó0.8√ó0.5 –º) –∏–ª–∏ –æ–±—ä–µ–º –≥—Ä—É–∑–∞ üí´"
        
        # –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞ –µ—Å–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –≥–∞–±–∞—Ä–∏—Ç—ã
        if not volume and length and width and height:
            volume = length * width * height
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏–º —Ä–∞—Å—á–µ—Ç
        quick_cost = calculate_quick_cost(weight, product_type, city, volume, length, width, height)
        
        if quick_cost:
            return calculate_detailed_cost(quick_cost, weight, product_type, city)
        else:
            return "‚ùå –û–π, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üå∏"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
        return "‚ö†Ô∏è –û–π, –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–°—Ç–∞—Ä—Ç'. üå∏"

def process_tracking_request(user_message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å –ª–∏—á–Ω–æ—Å—Ç—å—é –ê–π—Å—É–ª—É"""
    try:
        # –ò—â–µ–º —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä
        track_match = re.search(r'\b(GZ|IY|SZ)[a-zA-Z0-9]{6,18}\b', user_message.upper())
        if track_match:
            track_number = track_match.group(0)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
            track_data = {}
            try:
                with open('guangzhou_track_data.json', 'r', encoding='utf-8') as f:
                    track_data = json.load(f)
            except:
                pass
            
            shipment = track_data.get(track_number)
            if shipment:
                status_emoji = {
                    "–ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ": "üè≠",
                    "–≤ –ø—É—Ç–∏ –¥–æ –≥—Ä–∞–Ω–∏—Ü—ã": "üöö", 
                    "–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ": "üõÉ",
                    "–≤ –ø—É—Ç–∏ –¥–æ –∞–ª–º–∞—Ç—ã": "üöõ",
                    "–ø—Ä–∏–±—ã–ª –≤ –∞–ª–º–∞—Ç—ã": "üèôÔ∏è",
                    "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω": "‚úÖ"
                }.get(shipment.get('status'), 'üì¶')
                
                return f"""
üì¶ **–ê–π—Å—É–ª—É –Ω–∞—à–ª–∞ –≤–∞—à –≥—Ä—É–∑ {track_number}!** üå∏

üë§ **–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** {shipment.get('fio', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üì¶ **–¢–æ–≤–∞—Ä:** {shipment.get('product', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}  
‚öñÔ∏è **–í–µ—Å:** {shipment.get('weight', 0)} –∫–≥
üìè **–û–±—ä–µ–º:** {shipment.get('volume', 0)} –º¬≥

üîÑ **–°—Ç–∞—Ç—É—Å:** {status_emoji} {shipment.get('status', '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ')}
üìä **–ü—Ä–æ–≥—Ä–µ—Å—Å:** {shipment.get('route_progress', 0)}%

üí° *–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É!* üòä
                """
            else:
                return f"‚ùå –û–π, –≥—Ä—É–∑ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º {track_number} –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä. üå∏"
        else:
            return "üì¶ –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: GZ123456) üå∏"
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}")
        return "‚ö†Ô∏è –û–π, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥—Ä—É–∑–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üå∏"

def save_application(name, phone, details=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É"""
    try:
        application_data = {
            'timestamp': datetime.now().isoformat(),
            'name': name,
            'phone': phone,
            'details': details or '–ó–∞—è–≤–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç–∞'
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        try:
            os.makedirs('data', exist_ok=True)
            applications_file = 'data/applications.json'
            applications = []
            
            if os.path.exists(applications_file):
                with open(applications_file, 'r', encoding='utf-8') as f:
                    applications = json.load(f)
            
            applications.append(application_data)
            
            with open(applications_file, 'w', encoding='utf-8') as f:
                json.dump(applications, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        
        return f"‚úÖ **–†–∞—Ö–∞–º–µ—Ç, {name}!** üå∏\n–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –ø–æ –Ω–æ–º–µ—Ä—É {phone}."
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return "‚ùå –û–π, –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. üå∏"

# ===== WEB –≠–ù–î–ü–û–ò–ù–¢–´ =====
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/chat', methods=['POST'])
def chat():
    try:
        if not request.json or 'message' not in request.json:
            return jsonify({"response": "‚ùå –û–π, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞! üå∏"}), 400

        user_message = request.json.get('message', '').strip()
        
        if not user_message:
            return jsonify({"response": "üìù –°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ! üå∏ –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."})

        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
        if 'chat_history' not in session:
            session['chat_history'] = []

        # ==== –í–°–¢–ê–í–¨ –ö–û–ù–¢–ï–ö–°–¢–ù–£–Æ –ü–ê–ú–Ø–¢–¨ –ó–î–ï–°–¨ ====
        # –ö–û–ù–¢–ï–ö–°–¢–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        if 'context' not in session:
            session['context'] = {
                'weight': None,
                'city': None, 
                'product_type': None,
                'dimensions': None,
                'boxes_count': None
            }
        
        # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ò –°–û–•–†–ê–ù–ï–ù–ò–ï –î–ê–ù–ù–´–•
        current_weight = extract_weight(user_message)
        current_city = extract_city(user_message)  
        current_product = find_product_category(user_message)
        current_dims = extract_dimensions(user_message)
        current_boxes = extract_boxes_from_message(user_message)
        
        # –û–ë–ù–û–í–õ–Ø–ï–ú –ö–û–ù–¢–ï–ö–°–¢ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if current_weight: session['context']['weight'] = current_weight
        if current_city: session['context']['city'] = current_city
        if current_product: session['context']['product_type'] = current_product  
        if current_dims != (None, None, None): session['context']['dimensions'] = current_dims
        if current_boxes: session['context']['boxes_count'] = len(current_boxes)
        
        context = session['context']
        
        # –£–ú–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –° –£–ß–ï–¢–û–ú –ö–û–ù–¢–ï–ö–°–¢–ê
        has_weight = context['weight'] or current_weight
        has_city = context['city'] or current_city  
        has_product = context['product_type'] or current_product
        has_dims = context['dimensions'] or (current_dims != (None, None, None))
        
        # –ï–°–õ–ò –ï–°–¢–¨ –í–°–ï –î–ê–ù–ù–´–ï –î–õ–Ø –†–ê–°–ß–ï–¢–ê - –°–ß–ò–¢–ê–ï–ú –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò
        if has_weight and has_city and has_product and has_dims:
            weight = context['weight'] or current_weight
            city = context['city'] or current_city
            product_type = context['product_type'] or current_product
            dims = context['dimensions'] or current_dims
            
            # –†–ê–°–ß–ï–¢ –° –£–ß–ï–¢–û–ú –ö–û–†–û–ë–û–ö
            if context['boxes_count'] and context['boxes_count'] > 1:
                total_weight = weight * context['boxes_count']
                volume_per_box = dims[0] * dims[1] * dims[2] if dims[0] else None
                total_volume = volume_per_box * context['boxes_count'] if volume_per_box else None
                
                quick_cost = calculate_quick_cost(total_weight, product_type, city, total_volume, dims[0], dims[1], dims[2])
                if quick_cost:
                    response = f"""
üéØ **–ê–π—Å—É–ª—É –≤—Å—ë –ø–æ–Ω—è–ª–∞! –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –¥–æ—Å—Ç–∞–≤–∫—É...** üå∏

üì¶ **–í–∞—à –∑–∞–∫–∞–∑:**
‚Ä¢ {context['boxes_count']} –∫–æ—Ä–æ–±–æ–∫ {product_type}
‚Ä¢ –í–µ—Å –∫–∞–∂–¥–æ–π: {weight} –∫–≥
‚Ä¢ –†–∞–∑–º–µ—Ä: {dims[0]*100 if dims[0] else '?'}√ó{dims[1]*100 if dims[1] else '?'}√ó{dims[2]*100 if dims[2] else '?'} —Å–º
‚Ä¢ –û–±—â–∏–π –≤–µ—Å: {total_weight} –∫–≥

""" + calculate_detailed_cost(quick_cost, total_weight, product_type, city)
                else:
                    response = "‚ùå –û–π, –Ω–µ –º–æ–≥—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ üå∏"
            else:
                # –†–∞—Å—á–µ—Ç –¥–ª—è –æ–¥–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏
                quick_cost = calculate_quick_cost(weight, product_type, city, None, dims[0], dims[1], dims[2])
                if quick_cost:
                    response = calculate_detailed_cost(quick_cost, weight, product_type, city)
                else:
                    response = "‚ùå –û–π, –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞! üå∏"
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞
            session['context'] = {'weight': None, 'city': None, 'product_type': None, 'dimensions': None, 'boxes_count': None}
            return jsonify({"response": response})
        # ==== –ö–û–ù–ï–¶ –ö–û–ù–¢–ï–ö–°–¢–ù–û–ô –ü–ê–ú–Ø–¢–ò ====

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–°—Ç–∞—Ä—Ç"
        if user_message.lower() in ['—Å—Ç–∞—Ä—Ç', 'start', '–Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç', '—Å–±—Ä–æ—Å', '–±–∞—Å—Ç–∞']:
            session.clear()
            session['chat_history'] = []
            return jsonify({"response": """
üîÑ **–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ! –Ø –ê–π—Å—É–ª—É - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ!** üå∏

ü§ñ **–Ø –ø–æ–º–æ–≥—É –≤–∞–º:**
üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ö–∏—Ç–∞—è
üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –≥—Ä—É–∑ –ø–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä—É  
üíº –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
‚ùì –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ

**–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ!** üòä

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ "50 –∫–≥ –º–µ–±–µ–ª–∏ –≤ –ê–ª–º–∞—Ç—ã, –≥–∞–±–∞—Ä–∏—Ç—ã 2√ó1√ó0.5 –º"
‚Ä¢ "–ì–¥–µ –º–æ–π –≥—Ä—É–∑ GZ123456?"
‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ —Ç–∞—Ä–∏—Ñ—ã –∏ –æ–ø–ª–∞—Ç—É"
‚Ä¢ "–•–æ—á—É –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É"

**–ñ–∞—Ä–∞–π—Å—ã“£! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!** üí´
            """})

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ—Ä–æ–±–∫–∏
        boxes = extract_boxes_from_message(user_message)
        if boxes and len(boxes) > 1:
            total_weight = sum(box['weight'] for box in boxes)
            session['multiple_boxes'] = boxes
            
            boxes_list = "\n".join([f"‚Ä¢ {i+1}. {box['weight']} –∫–≥" for i, box in enumerate(boxes)])
            
            response = f"""
üì¶ **–û–π, –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ–±–æ–∫!** üå∏
{boxes_list}

üìä **–û–±—â–∏–π –≤–µ—Å:** {total_weight} –∫–≥

üèôÔ∏è **–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ:**
‚Ä¢ –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
‚Ä¢ –¢–∏–ø —Ç–æ–≤–∞—Ä–∞  
‚Ä¢ –ì–∞–±–∞—Ä–∏—Ç—ã –∫–æ—Ä–æ–±–æ–∫

üí° **–ü—Ä–∏–º–µ—Ä:** "–≤ –ê—Å—Ç–∞–Ω—É, –æ–¥–µ–∂–¥–∞, –∫–æ—Ä–æ–±–∫–∏ 60√ó40√ó30 —Å–º"

**–ñ–∞—Ä–∞–π—Å—ã“£! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º!** üí´
            """
            return jsonify({"response": response})

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞–ª–ª–µ—Ç—ã
        pallets = extract_pallets_from_message(user_message)
        if pallets:
            total_weight = sum(pallet['weight'] for pallet in pallets)
            total_volume = sum(pallet['volume'] for pallet in pallets)
            
            response = f"""
üéØ **–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–∞–ª–ª–µ—Ç—ã!** üå∏
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {len(pallets)} —à—Ç
‚Ä¢ –û–±—â–∏–π –≤–µ—Å: {total_weight} –∫–≥  
‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º: {total_volume:.1f} –º¬≥

üèôÔ∏è **–î–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ:**
‚Ä¢ –ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
‚Ä¢ –¢–∏–ø —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –ø–∞–ª–ª–µ—Ç–∞—Ö

üí° **–ü—Ä–∏–º–µ—Ä:** "–≤ –ö–∞—Ä–∞–≥–∞–Ω–¥—É, –º–µ–±–µ–ª—å –Ω–∞ –ø–∞–ª–ª–µ—Ç–∞—Ö"

**–û—Ç–ª–∏—á–Ω–æ! –ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!** üòä
            """
            return jsonify({"response": response})

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        text_lower = user_message.lower()
        
        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
        if any(word in text_lower for word in ['—Ç—Ä–µ–∫', '–æ—Ç—Å–ª–µ–¥–∏—Ç—å', '—Å—Ç–∞—Ç—É—Å', '–≥–¥–µ', '–≥—Ä—É–∑', '–ø–æ—Å—ã–ª–∫–∞']) or re.search(r'\b(GZ|IY|SZ)[a-zA-Z0-9]', text_lower.upper()):
            response = process_tracking_request(user_message)
        
        # –ó–∞—è–≤–∫–∞ (–µ—Å—Ç—å –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω)
        elif re.search(r'(?:–∏–º—è|–∑–æ–≤—É—Ç|–º–µ–Ω—è –∑–æ–≤—É—Ç)\s*[:\-]?\s*[–∞-—èa-z]{2,}', text_lower) and re.search(r'\d{10,11}', text_lower):
            name_match = re.search(r'(?:–∏–º—è|–∑–æ–≤—É—Ç|–º–µ–Ω—è –∑–æ–≤—É—Ç)\s*[:\-]?\s*([–∞-—èa-z]{2,})', text_lower)
            phone_match = re.search(r'(\d{10,11})', text_lower)
            
            if name_match and phone_match:
                name = name_match.group(1).capitalize()
                phone = phone_match.group(1)
                response = save_application(name, phone, user_message)
            else:
                response = "‚ùå –û–π, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã! –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω. üå∏"
        
        # –†–∞—Å—á–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ (–µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
        elif (extract_weight(user_message) and extract_city(user_message)) or any(word in text_lower for word in ['—Ä–∞—Å—Å—á–∏—Ç–∞–π', '–ø–æ—Å—á–∏—Ç–∞–π', '—Å–∫–æ–ª—å–∫–æ', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–¥–æ—Å—Ç–∞–≤–∫']):
            response = process_delivery_request(user_message)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        elif any(greeting in text_lower for greeting in GREETINGS):
            response = "–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ! üå∏ –Ø –ê–π—Å—É–ª—É - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ –∏–∑ –ö–∏—Ç–∞—è! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"
        
        # –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã - –∏—Å–ø–æ–ª—å–∑—É–µ–º Gemini —Å –ª–∏—á–Ω–æ—Å—Ç—å—é –ê–π—Å—É–ª—É
        else:
            response = get_gemini_response(user_message, session.get('chat_history', []))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        session['chat_history'].append(f"–ö–ª–∏–µ–Ω—Ç: {user_message}")
        session['chat_history'].append(f"–ê–π—Å—É–ª—É: {response}")
        
        if len(session['chat_history']) > 10:
            session['chat_history'] = session['chat_history'][-10:]

        return jsonify({"response": response})

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return jsonify({"response": "‚ö†Ô∏è –û–π, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–°—Ç–∞—Ä—Ç'. üå∏"})

@app.route('/health')
def health_check():
    return jsonify({
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "gemini_configured": GEMINI_API_KEY is not None,
        "config_loaded": config is not None,
        "model_initialized": model is not None,
        "aisulu_prompt_loaded": AISULU_PROMPT is not None
    })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(debug=False, host='0.0.0.0', port=port)
