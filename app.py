import os
import re
import json
import logging
import psycopg2
import psycopg2.pool
from datetime import datetime, timedelta
from flask import Flask, render_template, request, jsonify, session
import google.generativeai as genai
from google.generativeai.types import GenerationConfig
from dotenv import load_dotenv

# --- 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- 2. –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–µ–π ---
load_dotenv()
GEMINI_API_KEY = os.getenv("GOOGLE_API_KEY")
DATABASE_URL = os.getenv('DATABASE_URL') # –ó–∞–≥—Ä—É–∂–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ .env
app = Flask(__name__)
app.secret_key = os.getenv('SECRET_KEY', 'postpro-secret-key-2024')
app.config['PERMANENT_SESSION_LIFETIME'] = 1800

# --- 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (–ù–æ–≤—ã–π –±–ª–æ–∫) ---
pool = None
try:
    if DATABASE_URL:
        pool = psycopg2.pool.SimpleConnectionPool(1, 10, dsn=DATABASE_URL)
        logger.info(">>> –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (–ø—É–ª —Å–æ–∑–¥–∞–Ω).")
    else:
        logger.error("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
except Exception as e:
    logger.error(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL: {e}")

# --- 4. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
def get_db_conn():
    """–ë–µ—Ä–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞"""
    if not pool:
        logger.error("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return None
    try:
        return pool.getconn()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞: {e}")
        return None

def release_db_conn(conn):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª"""
    if pool and conn:
        pool.putconn(conn)

def query_db(sql, params=None, fetch_one=False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ (–ß–¢–ï–ù–ò–ï)"""
    conn = get_db_conn()
    if not conn:
        return None
    
    result = None
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'with' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –∫—É—Ä—Å–æ—Ä–∞
        with conn.cursor() as cursor:
            cursor.execute(sql, params)
            if fetch_one:
                result = cursor.fetchone()
            else:
                result = cursor.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQL-–∑–∞–ø—Ä–æ—Å–∞ (–ß–¢–ï–ù–ò–ï): {e} | SQL: {sql} | Params: {params}")
    finally:
        release_db_conn(conn)
    return result

def execute_db(sql, params=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ (–ó–ê–ü–ò–°–¨/–ò–ó–ú–ï–ù–ï–ù–ò–ï)"""
    conn = get_db_conn()
    if not conn:
        return False
        
    try:
        with conn.cursor() as cursor:
            cursor.execute(sql, params)
            conn.commit() # <-- –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQL-–∑–∞–ø—Ä–æ—Å–∞ (–ó–ê–ü–ò–°–¨): {e} | SQL: {sql} | Params: {params}")
        if conn:
            conn.rollback() # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return False
    finally:
        release_db_conn(conn)

# --- 5. –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ (–û—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def load_personality_prompt():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –ª–∏—á–Ω–æ—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞ personality_prompt.txt."""
    try:
        with open('personality_prompt.txt', 'r', encoding='utf-8') as f:
            prompt_text = f.read()
            logger.info(">>> –§–∞–π–ª personality_prompt.txt —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
            return prompt_text
    except FileNotFoundError:
        logger.error("!!! –§–∞–π–ª personality_prompt.txt –Ω–µ –Ω–∞–π–¥–µ–Ω! –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ.")
        return "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ Post Pro. –û–±—â–∞–π—Å—è –≤–µ–∂–ª–∏–≤–æ, —Å –ª—ë–≥–∫–∏–º –ø–æ–∑–∏—Ç–∏–≤–æ–º –∏ —ç–º–æ–¥–∑–∏, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫."

PERSONALITY_PROMPT = load_personality_prompt()

# –í–ê–ñ–ù–û: –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ –í–ï–°–¨ –≤–∞—à SYSTEM_INSTRUCTION –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ app.py
SYSTEM_INSTRUCTION = """
–¢—ã ‚Äî —É–º–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ PostPro. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É.

***–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:***

1. **–°–ö–õ–ê–î–´ –í –ö–ò–¢–ê–ï:** –£ –Ω–∞—Å —Ç–æ–ª—å–∫–æ 2 —Å–∫–ª–∞–¥–∞ - –ò–£ –∏ –ì—É–∞–Ω—á–∂–æ—É. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç "–æ—Ç–∫—É–¥–∞ –∑–∞–±–µ—Ä–µ—Ç–µ?" - –æ—Ç–≤–µ—á–∞–π: "–£—Ç–æ—á–Ω–∏—Ç–µ —É –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –∫–∞–∫–æ–π —Å–∫–ª–∞–¥ –µ–º—É –±–ª–∏–∂–µ - –ò–£ –∏–ª–∏ –ì—É–∞–Ω—á–∂–æ—É"
2. **–¢–ê–†–ò–§–´:**... (–∏ —Ç.–¥.) ...
7. **–ù–ï –£–ü–û–ú–ò–ù–ê–ô:** –¥—Ä—É–≥–∏–µ –≥–æ—Ä–æ–¥–∞ –ö–∏—Ç–∞—è –∫—Ä–æ–º–µ –ò–£ –∏ –ì—É–∞–Ω—á–∂–æ—É

–í—Å–µ–≥–¥–∞ –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º! üòä
"""

# --- 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini (–û—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
model = None
try:
    if GEMINI_API_KEY:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('models/gemini-2.0-flash')
        logger.info(">>> –ú–æ–¥–µ–ª—å Gemini —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    else:
        logger.error("!!! API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
except Exception as e:
    logger.error(f"!!! –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")

# --- 7. –ù–û–í–´–ô MultiWarehouseTracker (–†–∞–±–æ—Ç–∞–µ—Ç —Å –ë–î) ---
class MultiWarehouseTracker:
    def __init__(self):
        # –≠—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –û–°–¢–ê–ï–¢–°–Ø –≤ –∫–æ–¥–µ
        self.warehouses = {
            "GZ": {
                "route": [
                    {"city": "üè≠ –ì—É–∞–Ω—á–∂–æ—É", "day": 0, "progress": 0},
                    {"city": "üöö –ù–∞–Ω—å—á–∞–Ω", "day": 2, "progress": 15},
                    {"city": "üöö –£—Ö–∞–Ω—å", "day": 4, "progress": 30},
                    {"city": "üöö –°–∏–∞–Ω—å", "day": 6, "progress": 46},
                    {"city": "üöö –õ–∞–Ω—å—á–∂–æ—É", "day": 8, "progress": 61},
                    {"city": "üöö –£—Ä—É–º—á–∏", "day": 10, "progress": 76},
                    {"city": "üõÉ –•–æ—Ä–≥–æ—Å (–≥—Ä–∞–Ω–∏—Ü–∞)", "day": 12, "progress": 85},
                    {"city": "‚úÖ –ê–ª–º–∞—Ç—ã", "day": 15, "progress": 100}
                ]
            },
            "IY": {
                 "route": [
                    {"city": "üè≠ –ò–£", "day": 0, "progress": 0},
                    {"city": "üöö –®–∞–Ω—Ö–∞–π", "day": 1, "progress": 25},
                    # ... (–∏ —Ç.–¥. –¥–ª—è –ò–£)
                    {"city": "‚úÖ –ê–ª–º–∞—Ç—ã", "day": 10, "progress": 100}
                ]
            }
        }

    def get_shipment_data_from_db(self, track_number):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–∑–∞ –∏–∑ PostgreSQL"""
        sql = "SELECT track_number, fio, phone, product, weight, volume, status, route_progress, warehouse_code, manager, created_at FROM shipments WHERE track_number = %s"
        data = query_db(sql, (track_number.upper(),), fetch_one=True)
        
        if not data:
            return None
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ—Ä—Ç–µ–∂ (tuple) –≤ —Å–ª–æ–≤–∞—Ä—å (dict) –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        shipment = {
            "track_number": data[0], "fio": data[1], "phone": data[2],
            "product": data[3], "weight": data[4], "volume": data[5],
            "status": data[6], "route_progress": data[7], 
            "warehouse_code": data[8], "manager": data[9], "created_at": data[10]
        }
        return shipment

    # (–§—É–Ω–∫—Ü–∏—è create_route_visualization –æ—Å—Ç–∞–µ—Ç—Å—è –¢–û–ß–ù–û –¢–ê–ö–û–ô –ñ–ï, –∫–∞–∫ –≤ app.py.py)
    def create_route_visualization(self, warehouse_code, progress):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∞ (–ª–æ–≥–∏–∫–∞ —Ç–∞ –∂–µ)"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'GZ' –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π, –µ—Å–ª–∏ –∫–æ–¥ —Å–∫–ª–∞–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω
        route_config = self.warehouses.get(warehouse_code, self.warehouses["GZ"])
        route = route_config["route"]
        
        visualization = "üõ£Ô∏è **–ú–ê–†–®–†–£–¢:**\n\n"
        for point in route:
            if point['progress'] <= progress:
                visualization += f"‚úÖ {point['city']} - –¥–µ–Ω—å {point['day']}\n"
            else:
                visualization += f"‚è≥ {point['city']} - –¥–µ–Ω—å {point['day']}\n"
        
        bars = 20
        filled = int(progress / 100 * bars)
        progress_bar = "üü¢" * filled + "‚ö™" * (bars - filled)
        visualization += f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%\n{progress_bar}\n"
        return visualization

    # (–§—É–Ω–∫—Ü–∏—è calculate_estimated_arrival –æ—Å—Ç–∞–µ—Ç—Å—è –¢–û–ß–ù–û –¢–ê–ö–û–ô –ñ–ï, –∫–∞–∫ –≤ app.py.py)
    def calculate_estimated_arrival(self, shipment):
        """–†–∞—Å—á–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–±—ã—Ç–∏—è"""
        created_at = shipment.get('created_at', datetime.now())
        if isinstance(created_at, str):
            created_at = datetime.fromisoformat(created_at)

        if shipment.get('status') == '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω':
            return "‚úÖ –ì—Ä—É–∑ —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω"

        current_progress = shipment.get('route_progress', 0)
        total_days = 15  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (–º–æ–∂–Ω–æ –±—Ä–∞—Ç—å –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞)

        if current_progress >= 100:
            return "üïí –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è"

        days_passed = (datetime.now() - created_at).days
        if days_passed >= total_days:
            return "üïí –°–∫–æ—Ä–æ –ø—Ä–∏–±—ã—Ç–∏–µ"

        days_left = max(1, total_days - days_passed) # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ—Ç—è –±—ã 1 –¥–µ–Ω—å
        estimated_date = datetime.now() + timedelta(days=days_left)

        return f"üìÖ {estimated_date.strftime('%d.%m.%Y')} (–æ–∫–æ–ª–æ {days_left} –¥–Ω–µ–π)"

    def get_shipment_info(self, track_number):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–µ (—Ç–µ–ø–µ—Ä—å –∏–∑ –ë–î)"""
        shipment = self.get_shipment_data_from_db(track_number)
        if not shipment:
            return None # –ì—Ä—É–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω

        status_emoji = {
            "–ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ": "üè≠", "–≤ –ø—É—Ç–∏ –¥–æ –≥—Ä–∞–Ω–∏—Ü—ã": "üöö", "–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ": "üõÉ",
            "–≤ –ø—É—Ç–∏ –¥–æ –∞–ª–º–∞—Ç—ã": "üöõ", "–ø—Ä–∏–±—ã–ª –≤ –∞–ª–º–∞—Ç—ã": "üèôÔ∏è", "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω": "‚úÖ"
        }.get(shipment['status'], 'üì¶')

        response = f"üì¶ **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ê–®–ï–ú –ì–†–£–ó–ï**\n\n"
        response += f"üî¢ **–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä:** {shipment['track_number']}\n"
        response += f"üë§ **–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** {shipment.get('fio', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        response += f"üì¶ **–¢–æ–≤–∞—Ä:** {shipment.get('product', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        response += f"‚öñÔ∏è **–í–µ—Å:** {shipment.get('weight', 0)} –∫–≥\n"
        response += f"üìè **–û–±—ä–µ–º:** {shipment.get('volume', 0)} –º¬≥\n\n"
        response += f"üîÑ **–°—Ç–∞—Ç—É—Å:** {status_emoji} {shipment['status']}\n\n"

        progress = shipment.get('route_progress', 0)
        warehouse_code = shipment.get('warehouse_code', 'GZ')
        response += self.create_route_visualization(warehouse_code, progress)
        response += "\n"
        
        eta = self.calculate_estimated_arrival(shipment) 
        response += f"‚è∞ **–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –ø—Ä–∏–±—ã—Ç–∏–µ:** {eta}\n\n"
        
        response += "üí° _–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É_"
        return response

tracker = MultiWarehouseTracker()

# --- 8. –§–£–ù–ö–¶–ò–ò-–ü–ê–†–°–ï–†–´ (–û—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
# (–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ –≤—Å–µ –≤–∞—à–∏ extract_... —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ app.py)

def extract_dimensions(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–∞–±–∞—Ä–∏—Ç—ã (–¥–ª–∏–Ω–∞, —à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞) –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    # (–í–∞—à –∫–æ–¥ extract_dimensions...)
    patterns = [
        r'(?:–≥–∞–±–∞—Ä–∏—Ç\w*|—Ä–∞–∑–º–µ—Ä\w*|–¥—à–≤|–¥–ª—à|—Ä–∞–∑–º)?\s*'
        r'(\d+(?:[.,]\d+)?)\s*(?:—Å–º|cm|–º|m|—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä\w*|–º–µ—Ç—Ä\w*)?\s*'
        r'[x—Ö*√ó–Ω–∞\s\-]+\s*'
        r'(\d+(?:[.,]\d+)?)\s*(?:—Å–º|cm|–º|m|—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä\w*|–º–µ—Ç—Ä\w*)?\s*'
        r'[x—Ö*√ó–Ω–∞\s\-]+\s*'
        r'(\d+(?:[.,]\d+)?)\s*(?:—Å–º|cm|–º|m|—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä\w*|–º–µ—Ç—Ä\w*)?'
    ]
    text_lower = text.lower()
    for pattern in patterns:
        matches = re.finditer(pattern, text_lower)
        for match in matches:
            try:
                l, w, h = [float(val.replace(',', '.')) for val in match.groups()]
                match_text = match.group(0).lower()
                has_explicit_m = any(word in match_text for word in ['–º', 'm', '–º–µ—Ç—Ä'])
                is_cm = '—Å–º' in match_text or 'cm' in match_text or (l > 5 or w > 5 or h > 5) and not has_explicit_m
                if is_cm:
                    l, w, h = l / 100, w / 100, h / 100
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã –≥–∞–±–∞—Ä–∏—Ç—ã: {l:.3f}x{w:.3f}x{h:.3f} –º")
                return l, w, h
            except Exception:
                continue
    return None, None, None # –í–æ–∑–≤—Ä–∞—â–∞–µ–º None, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

def extract_volume(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–π –æ–±—ä–µ–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    # (–í–∞—à –∫–æ–¥ extract_volume...)
    patterns = [
        r'(\d+(?:[.,]\d+)?)\s*(?:–∫—É–±\.?\s*–º|–º¬≥|–º3|–∫—É–±\.?|–∫—É–±–∏—á–µ—Å–∫\w+\s*–º–µ—Ç—Ä\w*|–∫—É–±–æ–º–µ—Ç—Ä\w*)',
        r'(?:–æ–±—ä–µ–º|volume)\w*\s*(\d+(?:[.,]\d+)?)\s*(?:–∫—É–±\.?\s*–º|–º¬≥|–º3|–∫—É–±\.?)?',
    ]
    text_lower = text.lower()
    for pattern in patterns:
        match = re.search(pattern, text_lower)
        if match:
            try:
                volume = float(match.group(1).replace(',', '.'))
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω –æ–±—ä–µ–º: {volume} –º¬≥")
                return volume
            except Exception:
                continue
    return None

def extract_boxes_from_message(message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ—Ä–æ–±–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è."""
    # (–í–∞—à –∫–æ–¥ extract_boxes_from_message...)
    boxes = []
    try:
        text_lower = message.lower().strip()
        pattern_main = r'(\d+)\s*(?:–∫–æ—Ä–æ–±–∫|–ø–æ—Å—ã–ª–∫|—É–ø–∞–∫–æ–≤–∫|—à—Ç|—à—Ç—É–∫)\w*\s+–ø–æ\s+(\d+(?:[.,]\d+)?)\s*–∫–≥'
        matches = re.findall(pattern_main, text_lower)
        for count, weight in matches:
            for _ in range(int(count)):
                boxes.append({'weight': float(weight.replace(',', '.'))})
        if boxes:
             logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É 1: {len(boxes)} –∫–æ—Ä.")
             return boxes
        # (–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ app.py.py)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ—Ä–æ–±–æ–∫: {e}")
    return boxes

def parse_product_assignments(message, total_boxes):
    """–ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–æ—Ä–æ–±–∫–∞–º."""
    # (–í–∞—à –∫–æ–¥ parse_product_assignments...)
    assignments = {}
    try:
        text_lower = message.lower().strip()
        
        # –ü—Ä–æ—Å—Ç–æ–π –≤–∞—Ä–∏–∞–Ω—Ç: –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä –¥–ª—è –≤—Å–µ—Ö
        if not any(char.isdigit() for char in text_lower):
            product_type = find_product_category_from_db(text_lower) or text_lower
            logger.info(f"üì¶ –ü—Ä–æ—Å—Ç–æ–π —Ç–æ–≤–∞—Ä –¥–ª—è –≤—Å–µ—Ö –∫–æ—Ä–æ–±–æ–∫: {product_type}")
            for i in range(total_boxes):
                assignments[i] = product_type
            return assignments

        # (–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ app.py.py)
        # –ü–∞—Ç—Ç–µ—Ä–Ω "–≤—Å–µ: —Ç–æ–≤–∞—Ä"
        if '–≤—Å–µ:' in text_lower or 'all:' in text_lower:
            product_match = re.search(r'(?:–≤—Å–µ|all)\s*:\s*([–∞-—èa-z\s]+)', text_lower)
            if product_match:
                product = product_match.group(1).strip()
                logger.info(f"üì¶ –í—Å–µ –∫–æ—Ä–æ–±–∫–∏: {product}")
                for i in range(total_boxes):
                    assignments[i] = product
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
    return assignments

def extract_contact_info(text):
    """–£–º–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    # (–í–∞—à –∫–æ–¥ extract_contact_info...)
    name, phone = None, None
    clean_text = re.sub(r'\s+', ' ', text.strip()).lower()
    name_match = re.search(r'(?:–∏–º—è|–º–µ–Ω—è –∑–æ–≤—É—Ç|–∑–æ–≤—É—Ç)\s*[:\-]?\s*([–∞-—èa-z]{2,})', clean_text)
    if name_match:
        name = name_match.group(1).capitalize()
    
    phone_match = re.search(r'(\d{10,11})', clean_text.replace(r'\D', ''))
    if phone_match:
        phone_num = phone_match.group(1)
        if phone_num.startswith('8'): phone_num = '7' + phone_num[1:]
        if len(phone_num) == 10: phone_num = '7' + phone_num
        if len(phone_num) == 11: phone = phone_num

    if not name and phone: # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–º—è, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–ª–µ—Ñ–æ–Ω
        name_guess = clean_text.split(phone_match.group(1))[0].strip(' ,')
        if name_guess and not name_guess.isdigit():
             name = name_guess.capitalize()
             
    if not name and not phone: # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ "–ò–º—è –¢–µ–ª–µ—Ñ–æ–Ω"
        match = re.search(r'([–∞-—èa-z]{2,})\s+(\d{10,11})', clean_text)
        if match:
            name = match.group(1).capitalize()
            phone_num = match.group(2).replace(r'\D', '')
            if phone_num.startswith('8'): phone_num = '7' + phone_num[1:]
            if len(phone_num) == 10: phone_num = '7' + phone_num
            if len(phone_num) == 11: phone = phone_num

    return name, phone

def check_dimensions_exceeded(length, width, height):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–∞–±–∞—Ä–∏—Ç–æ–≤ (–ª–æ–≥–∏–∫–∞ —Ç–∞ –∂–µ)"""
    # (–í–∞—à –∫–æ–¥ check_dimensions_exceeded...)
    if not length or not width or not height:
        return False
    return (length > MAX_DIMENSIONS['length'] or
            width > MAX_DIMENSIONS['width'] or
            height > MAX_DIMENSIONS['height'])

# --- 9. –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–ê (–†–∞–±–æ—Ç–∞—é—Ç —Å –ë–î) ---
MAX_DIMENSIONS = {'length': 2.3, 'width': 1.8, 'height': 1.1} # (–ò–∑ —Å—Ç–∞—Ä–æ–≥–æ app.py)

def get_exchange_rate_from_db():
    """–ü–æ–ª—É—á–∞–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç –∏–∑ –ë–î"""
    data = query_db("SELECT value FROM settings WHERE key = 'exchange_rate'", fetch_one=True)
    return data[0] if data else 550 # 550 - —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –∫—É—Ä—Å

def get_destination_zone_from_db(city_name):
    """–ù–∞—Ö–æ–¥–∏—Ç –∑–æ–Ω—É –≤ –ë–î –ø–æ –∏–º–µ–Ω–∏ –≥–æ—Ä–æ–¥–∞"""
    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    sql = "SELECT zone FROM cities WHERE city_name = %s"
    data = query_db(sql, (city_name.lower(),), fetch_one=True)
    if data:
        return data[0]
    
    # –ò—â–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ç–æ—á–Ω–æ–≥–æ –Ω–µ—Ç)
    sql_like = "SELECT zone FROM cities WHERE %s LIKE '%' || city_name || '%'"
    data_like = query_db(sql_like, (city_name.lower(),), fetch_one=True)
    if data_like:
        logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∑–æ–Ω–∞ (LIKE): {data_like[0]} –¥–ª—è {city_name}")
        return data_like[0]
        
    logger.warning(f"–ó–æ–Ω–∞ –¥–ª—è {city_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î.")
    return None

def find_product_category_from_db(text):
    """–ù–∞—Ö–æ–¥–∏—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞ –ø–æ —Ç–µ–∫—Å—Ç—É (–ó–ê–ú–ï–ù–ê –î–õ–Ø find_product_category)"""
    # (–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—É—é. –ï–π –Ω—É–∂–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ 'category_keywords')
    # –ú—ã –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –µ–µ –≤ –®–∞–≥–µ 1–ë, –ø–æ—ç—Ç–æ–º—É –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ó–ê–ì–õ–£–®–ö–£
    logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ó–ê–ì–õ–£–®–ö–ê –¥–ª—è find_product_category_from_db")
    text_lower = text.lower()
    if any(k in text_lower for k in ["–º–µ–±–µ–ª—å", "–¥–∏–≤–∞–Ω", "—à–∫–∞—Ñ"]): return "–º–µ–±–µ–ª—å"
    if any(k in text_lower for k in ["—Ç–µ—Ö–Ω–∏–∫–∞", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–Ω–æ—É—Ç–±—É–∫"]): return "—Ç–µ—Ö–Ω–∏–∫–∞"
    if any(k in text_lower for k in ["—Ç–∫–∞–Ω–∏", "–æ–¥–µ–∂–¥–∞", "–≤–µ—â–∏", "–∫—É—Ä—Ç–∫–∏"]): return "—Ç–∫–∞–Ω–∏"
    if any(k in text_lower for k in ["–∫–æ—Å–º–µ—Ç–∏–∫–∞", "–¥—É—Ö–∏", "–∫—Ä–µ–º"]): return "–∫–æ—Å–º–µ—Ç–∏–∫–∞"
    if any(k in text_lower for k in ["–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏", "–∑–∞–ø—á–∞—Å—Ç–∏", "—à–∏–Ω–∞"]): return "–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏"
    return "–æ–±—â–∏–µ" # –ö–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def get_t1_rate_from_db(product_type, weight, volume):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∞—Ä–∏—Ñ –¢1 –∏–∑ –ë–î –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏"""
    if not volume or volume <= 0:
        logger.warning("–û–±—ä–µ–º 0, —Ä–∞—Å—á–µ—Ç T1 –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
        return None, 0
        
    density = weight / volume
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é, —Ä–∞–±–æ—Ç–∞—é—â—É—é (–ø–æ–∫–∞) —Å –∑–∞–≥–ª—É—à–∫–æ–π
    category = find_product_category_from_db(product_type) 
    
    sql = """
    SELECT price, unit 
    FROM t1_rates 
    WHERE category_name = %s AND min_density <= %s
    ORDER BY min_density DESC 
    LIMIT 1
    """
    rule = query_db(sql, (category, density), fetch_one=True)
    
    if rule:
        logger.info(f"–ù–∞–π–¥–µ–Ω T1 —Ç–∞—Ä–∏—Ñ (SQL): {rule[0]} {rule[1]} –¥–ª—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ {density:.1f}")
        return {"price": rule[0], "unit": rule[1]}, density
    else:
        logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω T1 —Ç–∞—Ä–∏—Ñ (SQL) –¥–ª—è {category} / {density:.1f}")
        # –ò—â–µ–º —Ç–∞—Ä–∏—Ñ "–æ–±—â–∏–µ" –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π
        rule_common = query_db(sql, ("–æ–±—â–∏–µ", density), fetch_one=True)
        if rule_common:
            logger.info(f"–ù–∞–π–¥–µ–Ω T1 —Ç–∞—Ä–∏—Ñ (SQL, –†–µ–∑–µ—Ä–≤–Ω—ã–π '–æ–±—â–∏–µ'): {rule_common[0]} {rule_common[1]}")
            return {"price": rule_common[0], "unit": rule_common[1]}, density
        return None, density


def get_t2_cost_from_db(weight: float, zone: str):
    """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¢2 –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º –∏–∑ –ë–î"""
    if zone == "–∞–ª–º–∞—Ç—ã":
        # (–ó–∞–≥–ª—É—à–∫–∞, —Ç.–∫. –≤ T2_RATES_DETAILED –Ω–µ—Ç –∑–æ–Ω—ã "–∞–ª–º–∞—Ç—ã")
        logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¢2 –¥–ª—è –ê–ª–º–∞—Ç—ã (250 —Ç–≥/–∫–≥)")
        return weight * 250 # –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ

    # 1. –ù–∞—Ö–æ–¥–∏–º —Ç–∞—Ä–∏—Ñ –∑–∞ –¥–æ–ø. –∫–≥
    extra_rate_data = query_db("SELECT extra_kg_rate FROM t2_rates_extra WHERE zone = %s", (zone,), fetch_one=True)
    extra_rate = extra_rate_data[0] if extra_rate_data else 300 # –†–µ–∑–µ—Ä–≤
    
    # 2. –ò—â–µ–º –±–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    cost_column = f"zone_{zone}_cost" # e.g., zone_3_cost
    sql_base = f"""
    SELECT {cost_column} 
    FROM t2_rates 
    WHERE max_weight >= %s 
    ORDER BY max_weight ASC 
    LIMIT 1
    """
    
    base_cost_data = query_db(sql_base, (weight,), fetch_one=True)

    if base_cost_data and weight <= 20:
        # –í–µ—Å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 20 –∫–≥, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        return base_cost_data[0]
    elif weight > 20:
        # –í–µ—Å –±–æ–ª—å—à–µ 20 –∫–≥. –ë–µ—Ä–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 20 –∫–≥ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø. –≤–µ—Å
        sql_20kg = f"SELECT {cost_column} FROM t2_rates WHERE max_weight = 20"
        base_20kg_data = query_db(sql_20kg, fetch_one=True)
        
        # –†–µ–∑–µ—Ä–≤, –µ—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç —Ä–æ–≤–Ω–æ 20 –∫–≥
        base_20kg_cost = base_20kg_data[0] if base_20kg_data else (20 * extra_rate) 
        
        remaining_weight = weight - 20
        total_t2_cost = base_20kg_cost + (remaining_weight * extra_rate)
        logger.info(f"–†–∞—Å—á–µ—Ç T2 (–ó–æ–Ω–∞ {zone}): {base_20kg_cost} (–±–∞–∑–∞ 20–∫–≥) + {remaining_weight}–∫–≥ * {extra_rate} = {total_t2_cost}")
        return total_t2_cost
    else:
        # –ï—Å–ª–∏ –≤–µ—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤ —Ç–∞–±–ª–∏—Ü–µ (e.g. > 20), —Å—á–∏—Ç–∞–µ–º –ø–æ –¥–æ–ø. —Ç–∞—Ä–∏—Ñ—É
        return weight * extra_rate

def calculate_quick_cost(weight: float, product_type: str, city: str, volume: float = None, length: float = None, width: float = None, height: float = None):
    """–ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç (—Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ë–î)"""
    try:
        # 0. –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—ä–µ–º–∞
        if not volume and length and width and height:
            volume = length * width * height
        
        if not volume or volume <= 0 or not weight or weight <= 0:
            logger.error("–í–µ—Å –∏–ª–∏ –æ–±—ä–µ–º –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —Ä–∞—Å—á–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω.")
            return None

        # 1. –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å
        EXCHANGE_RATE = get_exchange_rate_from_db()
        
        # 2. –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ T1
        rule, density = get_t1_rate_from_db(product_type, weight, volume)
        if not rule:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ T1 –∏–∑ –ë–î –¥–ª—è {product_type}")
            return None

        price = rule['price']
        unit = rule['unit']
        if unit == "kg":
            cost_usd = price * weight
        else: # "m3"
            cost_usd = price * volume
        
        t1_cost_kzt = cost_usd * EXCHANGE_RATE

        # 3. –ü–æ–ª—É—á–∞–µ–º –∑–æ–Ω—É
        zone = get_destination_zone_from_db(city)
        if not zone:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–æ–Ω—É –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}")
            return None

        # 4. –ü–æ–ª—É—á–∞–µ–º —Ç–∞—Ä–∏—Ñ T2
        t2_cost_kzt = get_t2_cost_from_db(weight, str(zone)) # str(zone) –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∑–æ–Ω–∞ '–∞–ª–º–∞—Ç—ã'
        zone_name = f"–∑–æ–Ω–∞ {zone}" if zone != "–∞–ª–º–∞—Ç—ã" else "–∞–ª–º–∞—Ç—ã"
        
        # 5. –ò—Ç–æ–≥–æ
        total_cost = (t1_cost_kzt + t2_cost_kzt) * 1.20

        return {
            't1_cost': t1_cost_kzt, 't2_cost': t2_cost_kzt, 'total': total_cost,
            'zone': zone_name, 'volume': volume, 'density': density, 'rule': rule,
            't1_cost_usd': cost_usd, 'length': length, 'width': width, 'height': height,
            'EXCHANGE_RATE': EXCHANGE_RATE # –ü–µ—Ä–µ–¥–∞–µ–º –∫—É—Ä—Å –≤ –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        }
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ calculate_quick_cost (SQL): {e}")
        import traceback
        logger.error(traceback.format_exc())
        return None

def calculate_detailed_cost(quick_cost, weight: float, product_type: str, city: str):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç (—Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ—Ç EXCHANGE_RATE –∏–∑ quick_cost)"""
    # (–ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ app.py.py)
    
    if not quick_cost:
        return "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"

    t1_cost = quick_cost['t1_cost']
    t2_cost = quick_cost['t2_cost']
    zone = quick_cost['zone']
    volume = quick_cost['volume']
    density = quick_cost['density']
    rule = quick_cost['rule']
    t1_cost_usd = quick_cost['t1_cost_usd']
    EXCHANGE_RATE = quick_cost['EXCHANGE_RATE'] # <-- –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—É—Ä—Å –∏–∑ —Ä–∞—Å—á–µ—Ç–∞

    price = rule['price']
    unit = rule['unit']
    if unit == "kg":
        calculation_text = f"${price}/–∫–≥ √ó {weight} –∫–≥ = ${t1_cost_usd:.2f} USD"
    else: # "m3"
        calculation_text = f"${price}/–º¬≥ √ó {volume:.3f} –º¬≥ = ${t1_cost_usd:.2f} USD"

    city_name = city.capitalize()

    length = quick_cost.get('length')
    width = quick_cost.get('width')
    height = quick_cost.get('height')

    if check_dimensions_exceeded(length, width, height):
        # –ì—Ä—É–∑ –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä—ã - —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≤—ã–≤–æ–∑
        t2_explanation = f"‚ùå **–í–∞—à –≥—Ä—É–∑ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏ 230√ó180√ó110 —Å–º**\n‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –¥–æ —Å–∫–ª–∞–¥–∞ –ê–ª–º–∞—Ç—ã (—Å–∞–º–æ–≤—ã–≤–æ–∑)"
        t2_cost = 0 # –û–±–Ω—É–ª—è–µ–º –¢2
        zone_text = "—Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≤—ã–≤–æ–∑"
        comparison_text = f"üí° **–°–∞–º–æ–≤—ã–≤–æ–∑ —Å–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã:** {t1_cost * 1.20:.0f} —Ç–µ–Ω–≥–µ (–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é 20%)"
    else:
        # –ì—Ä—É–∑ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
        if zone == "–∞–ª–º–∞—Ç—ã":
            t2_explanation = f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É –ê–ª–º–∞—Ç—ã –¥–æ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞"
            zone_text = "–≥–æ—Ä–æ–¥ –ê–ª–º–∞—Ç—ã"
            comparison_text = f"üí° **–ï—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ —Å–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã:** {t1_cost * 1.20:.0f} —Ç–µ–Ω–≥–µ (–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é 20%)"
        else:
            t2_explanation = f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –≤ {city_name}"
            zone_text = f"{zone}"
            comparison_text = f"üí° **–ï—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –ê–ª–º–∞—Ç—ã:** {t1_cost * 1.20:.0f} —Ç–µ–Ω–≥–µ (–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é 20%)"

    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º (–∏–ª–∏ –±–µ–∑) –¢2
    if check_dimensions_exceeded(length, width, height):
        total_cost = t1_cost * 1.20  # –¢–æ–ª—å–∫–æ –¢1 —Å –∫–æ–º–∏—Å—Å–∏–µ–π
    else:
        total_cost = (t1_cost + t2_cost) * 1.20

    response = (
        f"üìä **–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è {weight} –∫–≥ ¬´{product_type}¬ª –≤ –≥. {city_name}:**\n\n"

        f"**–¢1: –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –ê–ª–º–∞—Ç—ã**\n"
        f"‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –≥—Ä—É–∑–∞: **{density:.1f} –∫–≥/–º¬≥**\n"
        f"‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω —Ç–∞—Ä–∏—Ñ –¢1: **${price} –∑–∞ {unit}**\n"
        f"‚Ä¢ –†–∞—Å—á–µ—Ç: {calculation_text}\n"
        f"‚Ä¢ –ü–æ –∫—É—Ä—Å—É {EXCHANGE_RATE} —Ç–µ–Ω–≥–µ/$ = **{t1_cost:.0f} —Ç–µ–Ω–≥–µ**\n\n"

        f"**–¢2: –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏ ({zone_text})**\n"
        f"{t2_explanation}\n"
        f"‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è {weight} –∫–≥ = **{t2_cost:.0f} —Ç–µ–Ω–≥–µ**\n\n"

        f"**–ö–æ–º–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ (20%):**\n"
        f"‚Ä¢ ({t1_cost:.0f} + {t2_cost:.0f}) √ó 20% = **{(t1_cost + t2_cost) * 0.20:.0f} —Ç–µ–Ω–≥–µ**\n\n"

        f"------------------------------------\n"
        f"üí∞ **–ò–¢–û–ì–û —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–æ –¥–≤–µ—Ä–∏:** ‚âà **{total_cost:,.0f} —Ç–µ–Ω–≥–µ**\n\n"

        f"{comparison_text}\n\n"
        f"üí° **–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ:** –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 1% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥—Ä—É–∑–∞\n"
        f"üí≥ **–û–ø–ª–∞—Ç–∞:** –ø–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n\n"
        f"‚úÖ **–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?** –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω!\n"
        f"üîÑ **–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç?** –ù–∞–ø–∏—à–∏—Ç–µ **–°—Ç–∞—Ä—Ç**"
    )
    return response


# --- 10. –ü–†–û–ß–ò–ï –§–£–ù–ö–¶–ò–ò (–û–ø–ª–∞—Ç–∞, –¢–∞—Ä–∏—Ñ—ã) ---
# (–≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
def explain_tariffs():
    return """üöö **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤:**

**–¢1 - –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã:**
‚Ä¢ ... (–∏ —Ç.–¥.)

**–¢2 - –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏:**
‚Ä¢ ... (–∏ —Ç.–¥.)"""

def get_payment_info():
    return """üí≥ **–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã:**

üí∞ **–ü–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞:** –í—ã –ø–ª–∞—Ç–∏—Ç–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥—Ä—É–∑–∞... (–∏ —Ç.–¥.)"""

def get_delivery_procedure():
    return """üì¶ **–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:**

1. **–ü—Ä–∏–µ–º –≥—Ä—É–∑–∞ –≤ –ö–∏—Ç–∞–µ:** ... (–∏ —Ç.–¥.)"""

# --- 11. –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –ó–ê–Ø–í–ö–ò (–†–∞–±–æ—Ç–∞–µ—Ç —Å –ë–î) ---
def save_application_to_db(name, phone, details):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞—è–≤–∫—É –≤ –ë–î.
    –ó–∞–º–µ–Ω—è–µ—Ç save_application()
    """
    sql = """
    INSERT INTO applications (timestamp, name, phone, details) 
    VALUES (NOW(), %s, %s, %s)
    """
    success = execute_db(sql, (name, phone, details))
    
    if success:
        logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: {name}, {phone}")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ë–î: {name}")
    return success

# --- 12. –§–£–ù–ö–¶–ò–Ø GEMINI (–û—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def get_gemini_response(user_message, context=""):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini –¥–ª—è –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."""
    # (–í–∞—à –∫–æ–¥ get_gemini_response...)
    if not model:
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ."
    try:
        multilingual_prompt = f"""
        {PERSONALITY_PROMPT}
        **–í–ê–ñ–ù–û: –¢—ã –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å –∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∫–∞–∑–∞—Ö—Å–∫–æ–º, –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –∏ –∫–∏—Ç–∞–π—Å–∫–æ–º —è–∑—ã–∫–∞—Ö.**
        –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:
        {context}
        –í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {user_message}
        –¢–≤–æ–π –æ—Ç–≤–µ—Ç (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–π —è–∑—ã–∫—É –≤–æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π):
        """
        response = model.generate_content(
            multilingual_prompt,
            generation_config=GenerationConfig(max_output_tokens=1000, temperature=0.8)
        )
        return response.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Gemini: {e}")
        return "–û–π, –∫–∞–∂–µ—Ç—Å—è, —É –º–µ–Ω—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ —Ä–∞—Å—á–µ—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏. üòä"


# --- 13. –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–• (–†–∞–±–æ—Ç–∞–µ—Ç —Å –ë–î) ---
def extract_delivery_info_from_db(text):
    """
    –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–æ–Ω–Ω.
    –†–∞–±–æ—Ç–∞–µ—Ç —Å –ë–î –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
    """
    weight = None
    product_type = None
    city = None

    try:
        text_lower = text.lower()
        
        # (–õ–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Å–∞ –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–π –∂–µ)
        weight_patterns = [
            r'(\d+(?:\.\d+)?)\s*(?:—Ç|—Ç–æ–Ω–Ω|—Ç–æ–Ω–Ω—ã|—Ç–æ–Ω–Ω–∞|—Ç–æ–Ω–Ω—É|t)',
            r'(\d+(?:\.\d+)?)\s*(?:–∫–≥|kg|–∫–∏–ª–æ–≥—Ä–∞–º–º|–∫–∏–ª–æ)',
        ]
        for pattern in weight_patterns:
            match = re.search(pattern, text_lower)
            if match:
                weight_value = float(match.group(1).replace(',', '.'))
                if re.search(r'(?:—Ç|—Ç–æ–Ω–Ω|—Ç–æ–Ω–Ω—ã|—Ç–æ–Ω–Ω–∞|—Ç–æ–Ω–Ω—É|t)', text_lower[match.start():match.end()]):
                    weight = weight_value * 1000  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–Ω–Ω—ã –≤ –∫–≥
                else:
                    weight = weight_value  # —É–∂–µ –≤ –∫–≥
                break

        # –ù–û–í–û–ï: –ò—â–µ–º –≥–æ—Ä–æ–¥ –≤ –ë–î
        all_cities = query_db("SELECT city_name FROM cities")
        if all_cities:
            for city_tuple in all_cities:
                city_name = city_tuple[0]
                if city_name in text_lower:
                    city = city_name
                    break
        
        # –ù–û–í–û–ï: –ò—â–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ –ë–î (–∏—Å–ø–æ–ª—å–∑—É—è –∑–∞–≥–ª—É—à–∫—É)
        product_type = find_product_category_from_db(text)

        return weight, product_type, city
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (SQL): {e}")
        return None, None, None

# --- 14. –ü–û–®–ê–ì–û–í–ê–Ø –õ–û–ì–ò–ö–ê (–û—Å—Ç–∞–µ—Ç—Å—è, –Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –ù–û–í–´–ï —Ñ—É–Ω–∫—Ü–∏–∏) ---
# (–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ process_..._step –∏ handle_multi_shipment_steps
#  –∫–æ–ø–∏—Ä—É—é—Ç—Å—è —Å—é–¥–∞ –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô, —Ç.–∫. –æ–Ω–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ–±–∏—Ä–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –≤ session
#  –∏ –≤ –∫–æ–Ω—Ü–µ –≤—ã–∑—ã–≤–∞—é—Ç –ù–û–í–´–ô calculate_quick_cost)

def process_weight_step(message, session_data):
    """–û–ë–†–ê–ë–û–¢–ö–ê –®–ê–ì–ê 1: –ü–û–õ–£–ß–ï–ù–ò–ï –í–ï–°–ê –ò –ö–û–õ–ò–ß–ï–°–¢–í–ê"""
    # (–ö–æ–¥ –∏–∑ app.py.py)
    try:
        boxes = extract_boxes_from_message(message)
        if not boxes:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ—Ä–æ–±–∫–∏. –£–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '3 –∫–æ—Ä–æ–±–∫–∏ –ø–æ 20 –∫–≥'"
        
        session_data['boxes'] = boxes
        session_data['step'] = 2
        
        box_list = "\n".join([f"‚Ä¢ {i+1}. {box['weight']} –∫–≥" for i, box in enumerate(boxes)])
        total_weight = sum(box['weight'] for box in boxes)
        
        return f"‚úÖ **–ü—Ä–∏–Ω—è—Ç–æ {len(boxes)} –∫–æ—Ä–æ–±–æ–∫:**\n{box_list}\n" \
               f"üìä **–û–±—â–∏–π –≤–µ—Å:** {total_weight} –∫–≥\n\n" \
               f"üìè **–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≥–∞–±–∞—Ä–∏—Ç—ã –ö–ê–ñ–î–û–ô –∫–æ—Ä–æ–±–∫–∏:**\n" \
               f"_–ü—Ä–∏–º–µ—Ä: '60√ó40√ó30 —Å–º, 50√ó50√ó50'_\n" \
               f"üí° **–ï—Å–ª–∏ –≤—Å–µ –∫–æ—Ä–æ–±–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ:** '–≤—Å–µ 60√ó40√ó30 —Å–º'"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_weight_step: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

def process_dimensions_step(message, session_data):
    """–û–ë–†–ê–ë–û–¢–ö–ê –®–ê–ì–ê 2: –ü–û–õ–£–ß–ï–ù–ò–ï –ì–ê–ë–ê–†–ò–¢–û–í"""
    # (–ö–æ–¥ –∏–∑ app.py.py)
    try:
        boxes = session_data['boxes']
        dimensions_list = [] # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≥–∞–±–∞—Ä–∏—Ç—ã
        
        # –ò—â–µ–º –≤—Å–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        pattern = r'(\d+(?:[.,]\d+)?)\s*[x—Ö*√ó]\s*(\d+(?:[.,]\d+)?)\s*[x—Ö*√ó]\s*(\d+(?:[.,]\d+)?)'
        matches = re.findall(pattern, message.lower())
        
        if not matches:
             return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–∞–±–∞—Ä–∏—Ç—ã. –£–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '60√ó40√ó30 —Å–º, 50√ó50√ó50'"
             
        for match in matches:
            l, w, h = [float(x.replace(',', '.')) for x in match]
            if l > 10 or w > 10 or h > 10: # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å–º –≤ –º
                l, w, h = l/100, w/100, h/100
            dimensions_list.append((l, w, h))

        if len(dimensions_list) != len(boxes) and len(dimensions_list) != 1:
            return f"‚ùå –£–∫–∞–∑–∞–Ω–æ {len(dimensions_list)} —Ä–∞–∑–º–µ—Ä–æ–≤, –Ω–æ –Ω—É–∂–Ω–æ {len(boxes)}."
        
        if len(dimensions_list) == 1:
            dims = dimensions_list[0]
            for box in boxes:
                box.update({'length': dims[0], 'width': dims[1], 'height': dims[2], 'volume': dims[0]*dims[1]*dims[2]})
        else:
            for i, box in enumerate(boxes):
                dims = dimensions_list[i]
                box.update({'length': dims[0], 'width': dims[1], 'height': dims[2], 'volume': dims[0]*dims[1]*dims[2]})
        
        session_data['step'] = 3
        boxes_info = "\n".join([f"‚Ä¢ {i+1}. {box['weight']} –∫–≥ - {box['volume']:.3f} –º¬≥" for i, box in enumerate(boxes)])
        
        return f"‚úÖ **–ì–∞–±–∞—Ä–∏—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:**\n{boxes_info}\n" \
               f"üìè **–û–±—â–∏–π –æ–±—ä–µ–º:** {sum(b['volume'] for b in boxes):.3f} –º¬≥\n\n" \
               f"üì¶ **–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ö–ê–ñ–î–û–ô –∫–æ—Ä–æ–±–∫–∏:**\n" \
               f"_–ü—Ä–∏–º–µ—Ä: '1-2: –æ–¥–µ–∂–¥–∞, 3: —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'_\n" \
               f"üí° **–ï—Å–ª–∏ –≤—Å–µ –∫–æ—Ä–æ–±–∫–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ:** '–≤—Å–µ: –æ–¥–µ–∂–¥–∞'"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_dimensions_step: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–∞–±–∞—Ä–∏—Ç–æ–≤."

def process_products_step(message, session_data):
    """–û–ë–†–ê–ë–û–¢–ö–ê –®–ê–ì–ê 3: –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ò–ü–û–í –¢–û–í–ê–†–û–í"""
    # (–ö–æ–¥ –∏–∑ app.py.py)
    try:
        boxes = session_data['boxes']
        product_assignments = parse_product_assignments(message, len(boxes))
        
        if not product_assignments:
            product_type = find_product_category_from_db(message)
            if product_type:
                for i in range(len(boxes)):
                    product_assignments[i] = product_type
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤."
        
        for box_idx, product_type_raw in product_assignments.items():
            if box_idx < len(boxes):
                category = find_product_category_from_db(product_type_raw)
                boxes[box_idx]['product_type'] = category
        
        session_data['step'] = 4
        products_info = "\n".join([f"‚Ä¢ {i+1}. {box.get('product_type', '–Ω–µ —É–∫–∞–∑–∞–Ω')}" for i, box in enumerate(boxes)])
        
        return f"‚úÖ **–¢–∏–ø—ã —Ç–æ–≤–∞—Ä–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:**\n{products_info}\n\n" \
               f"üèôÔ∏è **–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏:**\n" \
               f"_–ü—Ä–∏–º–µ—Ä: '–ê–ª–º–∞—Ç—ã', '–ê—Å—Ç–∞–Ω–∞', '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞'_"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_products_step: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–ø–æ–≤ —Ç–æ–≤–∞—Ä–æ–≤."

def process_city_step(message, session_data):
    """–û–ë–†–ê–ë–û–¢–ö–ê –®–ê–ì–ê 4: –ü–û–õ–£–ß–ï–ù–ò–ï –ì–û–†–û–î–ê –ò –†–ê–°–ß–ï–¢"""
    # (–ö–æ–¥ –∏–∑ app.py.py, –Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç –ù–û–í–´–ô calculate_quick_cost)
    try:
        boxes = session_data['boxes']
        city = None
        
        # –ù–û–í–û–ï: –ò—â–µ–º –≥–æ—Ä–æ–¥ –≤ –ë–î
        all_cities = query_db("SELECT city_name FROM cities")
        if all_cities:
            for city_tuple in all_cities:
                city_name = city_tuple[0]
                if city_name in message.lower():
                    city = city_name
                    break
        
        if not city:
            return "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –£–∫–∞–∂–∏—Ç–µ: '–ê–ª–º–∞—Ç—ã', '–ê—Å—Ç–∞–Ω–∞', '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞' –∏ —Ç.–¥."
        
        total_cost = 0
        calculations = []
        
        for i, box in enumerate(boxes):
            # –í–´–ó–´–í–ê–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ –†–ê–°–ß–ï–¢–ê
            quick_cost = calculate_quick_cost(
                box['weight'],
                box.get('product_type', '–æ–±—â–∏–µ'),
                city,
                box.get('volume'),
                box.get('length'),
                box.get('width'), 
                box.get('height')
            )
            
            if quick_cost:
                box_cost = quick_cost['total']
                total_cost += box_cost
                calculations.append({
                    'box_num': i + 1,
                    'description': f"{box['weight']} –∫–≥ {box.get('product_type', '–æ–±—â–∏–µ')}",
                    'cost': box_cost,
                    'volume': box['volume'],
                })
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ (SQL) –¥–ª—è –∫–æ—Ä–æ–±–∫–∏ {i+1}")
        
        if not calculations:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        
        response = f"üéØ **–†–ê–°–ß–ï–¢ –î–õ–Ø {len(boxes)} –ö–û–†–û–ë–û–ö –í {city.upper()}:**\n\n"
        for calc in calculations:
            response += f"üì¶ **–ö–û–†–ë–û–ö–ê {calc['box_num']} ({calc['description']}):**\n"
            response += f"   ‚Ä¢ –û–±—ä–µ–º: {calc['volume']:.3f} –º¬≥\n"
            response += f"   ‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å: **{calc['cost']:,.0f} ‚Ç∏**\n\n"
        
        response += f"üí∞ **–û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {total_cost:,.0f} ‚Ç∏**\n\n"
        response += "üí° *–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∫–ª—é—á–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏ –∏ –∫–æ–º–∏—Å—Å–∏—è 20%*\n\n"
        response += "‚úÖ **–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É? –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω!**\n"
        response += "üîÑ **–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç?** –ù–∞–ø–∏—à–∏—Ç–µ **–°—Ç–∞—Ä—Ç**"
        
        session_data['calculation_result_details'] = f"{len(boxes)} –∫–æ—Ä–æ–±–æ–∫ –≤ {city}, –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:,.0f} ‚Ç∏"
        session_data['step'] = 0 # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥
        session['waiting_for_contacts'] = True # –°—Ä–∞–∑—É –∂–¥–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã

        return response

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_city_step (SQL): {e}")
        return "‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∫–æ–º–∞–Ω–¥–æ–π '–°—Ç–∞—Ä—Ç'."

def handle_multi_shipment_steps(user_message, session_data):
    """
    –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ü–û–®–ê–ì–û–í–û–ì–û –°–ë–û–†–ê –î–ê–ù–ù–´–•
    (–ö–æ–¥ –∏–∑ app.py.py)
    """
    try:
        step = session_data.get('step', 0)
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞–≥–∞ {step} –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        
        if step == 1:
            return process_weight_step(user_message, session_data)
        elif step == 2:
            return process_dimensions_step(user_message, session_data)
        elif step == 3:
            return process_products_step(user_message, session_data)
        elif step == 4:
            return process_city_step(user_message, session_data)
        else:
            session_data['step'] = 0
            return "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π '–°—Ç–∞—Ä—Ç'"
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_multi_shipment_steps: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç –∫–æ–º–∞–Ω–¥–æ–π '–°—Ç–∞—Ä—Ç'"


# --- 15. –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö /chat (–ü–µ—Ä–µ–ø–∏—Å–∞–Ω –¥–ª—è –ë–î) ---
@app.route('/chat', methods=['POST'])
def chat():
    try:
        if not request.json or 'message' not in request.json:
            return jsonify({"response": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"}), 400

        user_message = request.json.get('message', '').strip()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π (–µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
        if 'multi_shipment' not in session:
            session['multi_shipment'] = {'step': 0, 'boxes': []}
        if 'delivery_data' not in session:
            session['delivery_data'] = {}
        if 'chat_history' not in session:
            session['chat_history'] = []
        if 'waiting_for_contacts' not in session:
            session['waiting_for_contacts'] = False
        if 'calculation_shown' not in session:
            session['calculation_shown'] = False
            
        # –ö–æ–º–∞–Ω–¥–∞ –°–±—Ä–æ—Å–∞ / –°—Ç–∞—Ä—Ç
        if user_message.lower() in ['—Å—Ç–∞—Ä—Ç', 'start', '—Å–±—Ä–æ—Å', '–Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç']:
            session['multi_shipment'] = {'step': 0, 'boxes': []}
            session['delivery_data'] = {}
            session['chat_history'] = []
            session['waiting_for_contacts'] = False
            session['calculation_shown'] = False
            session.pop('quick_cost', None) # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ä–∞—Å—á–µ—Ç
            session.pop('calculation_result_details', None)
            
            return jsonify({"response": "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç!\n\nüì¶ **–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:**\n‚Ä¢ **–í–µ—Å** (–∫–≥)\n‚Ä¢ **–¢–∏–ø —Ç–æ–≤–∞—Ä–∞** (–º–µ–±–µ–ª—å, —Ç–µ—Ö–Ω–∏–∫–∞...)\n‚Ä¢ **–ì–∞–±–∞—Ä–∏—Ç—ã** (–î√ó–®√ó–í) –∏–ª–∏ **–û–±—ä–µ–º** (–º¬≥)\n‚Ä¢ **–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏**\n\nüí° *–ò–ª–∏* —É–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ –∫–æ—Ä–æ–±–æ–∫ (e.g. '3 –∫–æ—Ä–æ–±–∫–∏ –ø–æ 20 –∫–≥')"})

        if not user_message:
            return jsonify({"response": "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."})

        logger.info(f"=== –ù–û–í–´–ô –ó–ê–ü–†–û–°: {user_message} ===")
        
        # --- 1. –õ–æ–≥–∏–∫–∞ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ ---
        if session['multi_shipment']['step'] > 0:
            logger.info(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (—à–∞–≥ {session['multi_shipment']['step']})")
            response = handle_multi_shipment_steps(user_message, session['multi_shipment'])
            session.modified = True # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
            return jsonify({"response": response})
        
        # --- 2. –õ–æ–≥–∏–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ ---
        multiple_boxes = extract_boxes_from_message(user_message)
        if multiple_boxes and len(multiple_boxes) > 0:
            logger.info(f"üéØ –ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {len(multiple_boxes)} –∫–æ—Ä–æ–±–æ–∫")
            session['multi_shipment'] = {'step': 1, 'boxes': [], 'current_data': {}}
            response = process_weight_step(user_message, session['multi_shipment'])
            session.modified = True
            return jsonify({"response": response})
            
        # --- 3. –õ–æ–≥–∏–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è (–ù–û–í–ê–Ø, —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ë–î) ---
        tracking_keywords = ['—Ç—Ä–µ–∫', '–æ—Ç—Å–ª–µ–¥–∏—Ç—å', '—Å—Ç–∞—Ç—É—Å', '–≥–¥–µ', '–∑–∞–∫–∞–∑', '–ø–æ—Å—ã–ª–∫–∞', '–≥—Ä—É–∑']
        has_tracking_request = any(keyword in user_message.lower() for keyword in tracking_keywords)
        track_match = re.search(r'\b(GZ|IY|SZ)[a-zA-Z0-9]{6,18}\b', user_message.upper())
        track_number = track_match.group(0) if track_match else None

        if has_tracking_request or track_number:
            if not track_number:
                return jsonify({"response": "üì¶ –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥—Ä—É–∑–∞ –º–Ω–µ –Ω—É–∂–µ–Ω —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: GZ123456)"})
            
            try:
                # –í–´–ó–´–í–ê–ï–ú –ù–û–í–´–ô –¢–†–ï–ö–ï–†
                shipment_info = tracker.get_shipment_info(track_number)
                if shipment_info:
                    return jsonify({"response": shipment_info})
                else:
                    return jsonify({"response": f"‚ùå –ì—Ä—É–∑ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º {track_number} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."})
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–∞ {track_number} (SQL): {e}")
                return jsonify({"response": f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."})

        # --- 4. –õ–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ (–ù–û–í–ê–Ø, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î) ---
        if session.get('waiting_for_contacts'):
            name, phone = extract_contact_info(user_message)

            if name and phone:
                details = session.get('calculation_result_details', '–î–µ—Ç–∞–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã')
                
                # –í–´–ó–´–í–ê–ï–ú –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ –°–û–•–†–ê–ù–ï–ù–ò–Ø –í –ë–î
                save_application_to_db(name, phone, details)

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é
                session['multi_shipment'] = {'step': 0, 'boxes': []}
                session['delivery_data'] = {}
                session['chat_history'] = []
                session['waiting_for_contacts'] = False
                session['calculation_shown'] = False
                session.pop('quick_cost', None)
                session.pop('calculation_result_details', None)

                return jsonify({"response": "üéâ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞. üìû‚è∞"})
            else:
                return jsonify({"response": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ê—Å–ª–∞–Ω, 87001234567'"})

        # --- 5. –õ–æ–≥–∏–∫–∞ –æ–±—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–û–ø–ª–∞—Ç–∞, –¢–∞—Ä–∏—Ñ—ã) ---
        if not session.get('calculation_shown'): # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –ø–æ–∫–∞–∑–∞–ª–∏ —Ä–∞—Å—á–µ—Ç
            if any(word in user_message.lower() for word in ['–æ–ø–ª–∞—Ç', '–ø–ª–∞—Ç–µ–∂', 'kaspi', 'halyk']):
                return jsonify({"response": get_payment_info()})
            if any(word in user_message.lower() for word in ['—Ç1', '—Ç2', '—Ç–∞—Ä–∏—Ñ', '–æ–±—ä—è—Å–Ω–∏']):
                return jsonify({"response": explain_tariffs()})
            if any(word in user_message.lower() for word in ['–ø—Ä–æ—Ü–µ–¥—É—Ä', '–ø—Ä–æ—Ü–µ—Å—Å', '–∫–∞–∫ –¥–æ—Å—Ç–∞–≤']):
                return jsonify({"response": get_delivery_procedure()})

        # --- 6. –õ–æ–≥–∏–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ (–ù–û–í–ê–Ø, —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ë–î) ---
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        weight, product_type, city = extract_delivery_info_from_db(user_message)
        length, width, height = extract_dimensions(user_message)
        volume_direct = extract_volume(user_message)
        
        delivery_data = session.get('delivery_data', {})
        data_updated = False
        confirmation_parts = []

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
        if weight: delivery_data['weight'] = weight; data_updated = True; confirmation_parts.append(f"üìä –í–µ—Å: {weight} –∫–≥")
        if product_type: delivery_data['product_type'] = product_type; data_updated = True; confirmation_parts.append(f"üì¶ –¢–æ–≤–∞—Ä: {product_type}")
        if city: delivery_data['city'] = city; data_updated = True; confirmation_parts.append(f"üèôÔ∏è –ì–æ—Ä–æ–¥: {city.capitalize()}")
        
        if volume_direct:
            delivery_data['volume'] = volume_direct; data_updated = True; confirmation_parts.append(f"üìè –û–±—ä–µ–º: {volume_direct:.3f} –º¬≥")
        elif length and width and height:
            delivery_data['volume'] = length * width * height; data_updated = True
            delivery_data.update({'length': length, 'width': width, 'height': height})
            confirmation_parts.append(f"üìê –ì–∞–±–∞—Ä–∏—Ç—ã: {length:.2f}√ó{width:.2f}√ó{height:.2f} –º (–û–±—ä–µ–º: {delivery_data['volume']:.3f} –º¬≥)")

        session['delivery_data'] = delivery_data

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        has_all_data = all([
            delivery_data.get('weight'),
            delivery_data.get('product_type'),
            delivery_data.get('city'),
            delivery_data.get('volume')
        ])

        if has_all_data:
            # –í–°–ï –î–ê–ù–ù–´–ï –ï–°–¢–¨ -> –°–ß–ò–¢–ê–ï–ú
            logger.info("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–±—Ä–∞–Ω—ã, –≤—ã–∑–æ–≤ calculate_quick_cost (SQL)...")
            quick_cost = calculate_quick_cost(
                delivery_data['weight'],
                delivery_data['product_type'],
                delivery_data['city'],
                delivery_data.get('volume'),
                delivery_data.get('length'),
                delivery_data.get('width'),
                delivery_data.get('height')
            )

            if quick_cost:
                detailed_response = calculate_detailed_cost(
                    quick_cost,
                    delivery_data['weight'],
                    delivery_data['product_type'],
                    delivery_data['city']
                )
                
                session['quick_cost'] = quick_cost
                session['calculation_shown'] = True
                session['waiting_for_contacts'] = True
                session['calculation_result_details'] = f"{delivery_data['weight']} –∫–≥ {delivery_data['product_type']} –≤ {delivery_data['city']}"
                
                return jsonify({"response": detailed_response})
            else:
                return jsonify({"response": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –≥–æ—Ä–æ–¥."})
        
        elif data_updated:
            # –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å, –Ω–æ –∏—Ö –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç
            response_message = "‚úÖ **–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:**\n" + "\n".join(confirmation_parts) + "\n\n"
            missing_data = []
            if not delivery_data.get('weight'): missing_data.append("–≤–µ—Å")
            if not delivery_data.get('product_type'): missing_data.append("—Ç–∏–ø —Ç–æ–≤–∞—Ä–∞")
            if not delivery_data.get('volume'): missing_data.append("–≥–∞–±–∞—Ä–∏—Ç—ã –∏–ª–∏ –æ–±—ä–µ–º")
            if not delivery_data.get('city'): missing_data.append("–≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏")
            
            response_message += f"üìù **–û—Å—Ç–∞–ª–æ—Å—å —É–∫–∞–∑–∞—Ç—å:** {', '.join(missing_data)}"
            return jsonify({"response": response_message})

        # --- 7. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ -> –°–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥ Gemini ---
        logger.info("–ù–∏ –æ–¥–∏–Ω —Ç—Ä–∏–≥–≥–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤—ã–∑–æ–≤ Gemini...")
        chat_history = session.get('chat_history', [])
        context_lines = ["–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:"] + chat_history[-6:]
        context = "\n".join(context_lines)
        
        bot_response = get_gemini_response(user_message, context)
        chat_history.append(f"–ö–ª–∏–µ–Ω—Ç: {user_message}")
        chat_history.append(f"–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: {bot_response}")
        session['chat_history'] = chat_history[-10:] # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        
        return jsonify({"response": bot_response})

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ /chat: {e}")
        import traceback
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        return jsonify({"response": "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."})

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —á–∞—Ç-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    # (–ö–æ–¥ –∏–∑ app.py.py)
    return render_template('index.html')

@app.route('/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è Render"""
    # (–ö–æ–¥ –∏–∑ app.py.py)
    return jsonify({"status": "healthy", "timestamp": datetime.now().isoformat()})

if __name__ == '__main__':
    # (–ö–æ–¥ –∏–∑ app.py.py)
    port = int(os.environ.get('PORT', 5000))
    app.run(debug=True, host='0.0.0.0', port=port) # –í–∫–ª—é—á–∞–µ–º debug=True –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏