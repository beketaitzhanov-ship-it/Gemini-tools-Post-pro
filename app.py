# -*- coding: utf-8 -*-
import os
import re
import json
import logging
import psycopg2
import psycopg2.pool
from datetime import datetime, timedelta
from flask import Flask, render_template, request, jsonify # –£–±–∏—Ä–∞–µ–º 'session' - –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω
import google.generativeai as genai
from google.generativeai.types import GenerationConfig, HarmCategory, HarmBlockThreshold
from dotenv import load_dotenv

# --- 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- 2. –ó–∞–≥—Ä—É–∑–∫–∞ API –∫–ª—é—á–µ–π ---
load_dotenv()
GEMINI_API_KEY = os.getenv("GOOGLE_API_KEY")
DATABASE_URL = os.getenv('DATABASE_URL') # –ó–∞–≥—Ä—É–∂–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ .env
app = Flask(__name__)
# app.secret_key = os.getenv('SECRET_KEY', 'postpro-secret-key-2024') # –ë–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è session

# --- 3. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL ---
pool = None
try:
    if DATABASE_URL:
        pool = psycopg2.pool.SimpleConnectionPool(1, 10, dsn=DATABASE_URL)
        logger.info(">>> –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL (–ø—É–ª —Å–æ–∑–¥–∞–Ω).")
    else:
        logger.error("!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
except Exception as e:
    logger.error(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL: {e}")

# --- 4. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
# (–§—É–Ω–∫—Ü–∏–∏ get_db_conn, release_db_conn, query_db, execute_db –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
def get_db_conn():
    """–ë–µ—Ä–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞"""
    if not pool:
        logger.error("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return None
    try:
        return pool.getconn()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞: {e}")
        return None

def release_db_conn(conn):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—É–ª"""
    if pool and conn:
        pool.putconn(conn)

def query_db(sql, params=None, fetch_one=False):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ (–ß–¢–ï–ù–ò–ï)"""
    conn = get_db_conn()
    if not conn: return None
    result = None
    try:
        with conn.cursor() as cursor:
            cursor.execute(sql, params)
            if fetch_one: result = cursor.fetchone()
            else: result = cursor.fetchall()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQL-–∑–∞–ø—Ä–æ—Å–∞ (–ß–¢–ï–ù–ò–ï): {e} | SQL: {sql} | Params: {params}")
    finally: release_db_conn(conn)
    return result

def execute_db(sql, params=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–æ–≤ (–ó–ê–ü–ò–°–¨/–ò–ó–ú–ï–ù–ï–ù–ò–ï)"""
    conn = get_db_conn()
    if not conn: return False
    try:
        with conn.cursor() as cursor:
            cursor.execute(sql, params)
            conn.commit()
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ SQL-–∑–∞–ø—Ä–æ—Å–∞ (–ó–ê–ü–ò–°–¨): {e} | SQL: {sql} | Params: {params}")
        if conn: conn.rollback()
        return False
    finally: release_db_conn(conn)

# --- 5. –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ (–û—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
# (–§—É–Ω–∫—Ü–∏—è load_personality_prompt –û–°–¢–ê–ï–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
def load_personality_prompt():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –ª–∏—á–Ω–æ—Å—Ç–∏ –∏–∑ —Ñ–∞–π–ª–∞ personality_prompt.txt."""
    try:
        with open('personality_prompt.txt', 'r', encoding='utf-8') as f:
            prompt_text = f.read()
            logger.info(">>> –§–∞–π–ª personality_prompt.txt —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
            return prompt_text
    except FileNotFoundError:
        logger.error("!!! –§–∞–π–ª personality_prompt.txt –Ω–µ –Ω–∞–π–¥–µ–Ω! –ë–æ—Ç –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ.")
        return "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ Post Pro. –û–±—â–∞–π—Å—è –≤–µ–∂–ª–∏–≤–æ, —Å –ª—ë–≥–∫–∏–º –ø–æ–∑–∏—Ç–∏–≤–æ–º –∏ —ç–º–æ–¥–∑–∏, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫."

PERSONALITY_PROMPT = load_personality_prompt()
SYSTEM_INSTRUCTION = """
–¢—ã ‚Äî —É–º–Ω—ã–π –ò–ò-–∞–≥–µ–Ω—Ç –∫–æ–º–ø–∞–Ω–∏–∏ PostPro Logistics. –¢–≤–æ—è –≥–ª–∞–≤–Ω–∞—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –∫–ª–∏–µ–Ω—Ç—É **—Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏** –≥—Ä—É–∑–∞ –∏–∑ –ö–∏—Ç–∞—è (—Å–∫–ª–∞–¥—ã –ì—É–∞–Ω—á–∂–æ—É, –ò–£) –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –∏ **–æ—Ç—Å–ª–µ–¥–∏—Ç—å** —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≥—Ä—É–∑. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Ö–æ—á–µ—Ç **–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É**, –ø–æ–º–æ–≥–∏ –µ–º—É —Å —ç—Ç–∏–º. –û—Ç–≤–µ—á–∞–π –Ω–∞ **–æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã** –æ –∫–æ–º–ø–∞–Ω–∏–∏ (–æ–ø–ª–∞—Ç–∞, –ø—Ä–æ—Ü–µ–¥—É—Ä–∞) –≤–µ–∂–ª–∏–≤–æ –∏ –∫—Ä–∞—Ç–∫–æ.

***–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê –ê–ì–ï–ù–¢–ê:***

1.  **–ò–ù–°–¢–†–£–ú–ï–ù–¢–´:** –£ —Ç–µ–±—è –µ—Å—Ç—å –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (Tools) –¥–ª—è:
    * `calculate_delivery_cost`: –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏. –í—ã–∑—ã–≤–∞–π –µ–≥–æ, –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã **–≤–µ—Å, —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞, –≥–æ—Ä–æ–¥ –ò (–æ–±—ä–µ–º –ò–õ–ò –≥–∞–±–∞—Ä–∏—Ç—ã)**. –ï—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç - –ó–ê–ü–†–ê–®–ò–í–ê–ô –Ω–µ–¥–æ—Å—Ç–∞—é—â–µ–µ —É –∫–ª–∏–µ–Ω—Ç–∞ –≤–µ–∂–ª–∏–≤–æ.
    * `track_shipment`: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥—Ä—É–∑–∞. –í—ã–∑—ã–≤–∞–π –µ–≥–æ, –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç —É–∫–∞–∑–∞–ª **—Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä** (GZ..., IY...). –ï—Å–ª–∏ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç, –Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞—é—Ç –ø—Ä–æ –≥—Ä—É–∑ - –ó–ê–ü–†–ê–®–ò–í–ê–ô –Ω–æ–º–µ—Ä.
    * `save_application`: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏. –í—ã–∑—ã–≤–∞–π –µ–≥–æ, –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –Ø–í–ù–û —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É **–ü–û–°–õ–ï** —Ä–∞—Å—á–µ—Ç–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª **–∏–º—è –ò —Ç–µ–ª–µ—Ñ–æ–Ω**.
    * `get_static_info`: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ, —Ç–∞—Ä–∏—Ñ–∞—Ö, –ø—Ä–æ—Ü–µ–¥—É—Ä–µ. –í—ã–∑—ã–≤–∞–π, –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ–± —ç—Ç–æ–º.
2.  **–°–ö–õ–ê–î–´ –í –ö–ò–¢–ê–ï:** –¢–û–õ–¨–ö–û –ì—É–∞–Ω—á–∂–æ—É –∏ –ò–£. –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —É–ø–æ–º–∏–Ω–∞–µ—Ç –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –ö–∏—Ç–∞—è (–®—ç–Ω—å—á–∂—ç–Ω—å –∏ —Ç.–¥.) - –≤–µ–∂–ª–∏–≤–æ —É—Ç–æ—á–Ω–∏, –Ω–∞ –∫–∞–∫–æ–π –∏–∑ –ù–ê–®–ò–• —Å–∫–ª–∞–¥–æ–≤ (–ì—É–∞–Ω—á–∂–æ—É –∏–ª–∏ –ò–£) –µ–º—É —É–¥–æ–±–Ω–µ–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å. –ù–µ –ø—ã—Ç–∞–π—Å—è —Å—á–∏—Ç–∞—Ç—å –∏–∑ –¥—Ä—É–≥–∏—Ö –≥–æ—Ä–æ–¥–æ–≤!
3.  **–û–ü–õ–ê–¢–ê:** –í—Å–µ–≥–¥–∞ –ø–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ (–Ω–∞–ª–∏—á–Ω—ã–µ, Kaspi, Halyk, Freedom, –±–µ–∑–Ω–∞–ª). –ò—Å–ø–æ–ª—å–∑—É–π `get_static_info` –¥–ª—è –¥–µ—Ç–∞–ª–µ–π.
4.  **–Ø–ó–´–ö:** –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ç–æ–º —è–∑—ã–∫–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –ø–∏—à–µ—Ç –∫–ª–∏–µ–Ω—Ç (—Ä—É—Å—Å–∫–∏–π, –∫–∞–∑–∞—Ö—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –∫–∏—Ç–∞–π—Å–∫–∏–π). –ü–æ–Ω–∏–º–∞–π —á–∏—Å–ª–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –ª—é–±–æ–º –∏–∑ –Ω–∏—Ö.
5.  **–°–¢–ò–õ–¨:** –î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —Å —ç–º–æ–¥–∑–∏ üòäüì¶üöö.

**–¢–í–û–Ø –ó–ê–î–ê–ß–ê:** –í–µ–¥–∏ –¥–∏–∞–ª–æ–≥ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞. –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Ö–≤–∞—Ç–∞–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ. –ï—Å–ª–∏ –Ω–µ—Ç - –∑–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã. –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –æ–±—â–∏–π - –æ—Ç–≤–µ—á–∞–π —Å–∞–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π `get_static_info`.
"""

# --- 6. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---
base_model = None # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å —Å model_with_tools
try:
    if GEMINI_API_KEY:
        genai.configure(api_key=GEMINI_API_KEY)
        base_model = genai.GenerativeModel('models/gemini-2.0-flash') # –ò–ª–∏ –∫–∞–∫–∞—è —É –≤–∞—Å –º–æ–¥–µ–ª—å
        logger.info(">>> –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å Gemini —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        logger.error("!!! API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
except Exception as e:
    logger.error(f"!!! –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")

# --- 7. MultiWarehouseTracker (–û–°–¢–ê–ï–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---
# (–ö–ª–∞—Å—Å MultiWarehouseTracker –∏ –µ–≥–æ –º–µ—Ç–æ–¥—ã get_shipment_data_from_db,
# create_route_visualization, calculate_estimated_arrival, get_shipment_info
# –û–°–¢–ê–Æ–¢–°–Ø –¢–û–ß–ù–û –¢–ê–ö–ò–ú–ò –ñ–ï, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ app.py)
class MultiWarehouseTracker:
    def __init__(self):
        # –≠—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –û–°–¢–ê–ï–¢–°–Ø –≤ –∫–æ–¥–µ
        self.warehouses = {
            "GZ": {"route": [{"city": "üè≠ –ì—É–∞–Ω—á–∂–æ—É", "day": 0, "progress": 0}, {"city": "üöö –ù–∞–Ω—å—á–∞–Ω", "day": 2, "progress": 15}, {"city": "üöö –£—Ö–∞–Ω—å", "day": 4, "progress": 30}, {"city": "üöö –°–∏–∞–Ω—å", "day": 6, "progress": 46}, {"city": "üöö –õ–∞–Ω—å—á–∂–æ—É", "day": 8, "progress": 61}, {"city": "üöö –£—Ä—É–º—á–∏", "day": 10, "progress": 76}, {"city": "üõÉ –•–æ—Ä–≥–æ—Å (–≥—Ä–∞–Ω–∏—Ü–∞)", "day": 12, "progress": 85}, {"city": "‚úÖ –ê–ª–º–∞—Ç—ã", "day": 15, "progress": 100}]},
            "IY": {"route": [{"city": "üè≠ –ò–£", "day": 0, "progress": 0}, {"city": "üöö –®–∞–Ω—Ö–∞–π", "day": 1, "progress": 25}, {"city": "üöö –ù–∞–Ω–∫–∏–Ω", "day": 2, "progress": 45}, {"city": "üöö –°–∏–∞–Ω—å", "day": 4, "progress": 65}, {"city": "üöö –õ–∞–Ω—å—á–∂–æ—É", "day": 6, "progress": 80}, {"city": "üõÉ –•–æ—Ä–≥–æ—Å (–≥—Ä–∞–Ω–∏—Ü–∞)", "day": 8, "progress": 92}, {"city": "‚úÖ –ê–ª–º–∞—Ç—ã", "day": 10, "progress": 100}]}
            # –î–æ–±–∞–≤–∏—Ç—å SZ –ø–æ–∑–∂–µ
        }
    def get_shipment_data_from_db(self, track_number):
        sql = "SELECT track_number, fio, phone, product, weight, volume, status, route_progress, warehouse_code, manager, created_at FROM shipments WHERE track_number = %s"
        data = query_db(sql, (track_number.upper(),), fetch_one=True)
        if not data: return None
        shipment = {"track_number": data[0], "fio": data[1], "phone": data[2], "product": data[3], "weight": data[4], "volume": data[5], "status": data[6], "route_progress": data[7], "warehouse_code": data[8], "manager": data[9], "created_at": data[10]}
        return shipment
    def create_route_visualization(self, warehouse_code, progress):
        route_config = self.warehouses.get(warehouse_code or "GZ", self.warehouses["GZ"]) # –î–æ–±–∞–≤–∏–ª 'or "GZ"'
        route = route_config["route"]
        visualization = "üõ£Ô∏è **–ú–ê–†–®–†–£–¢:**\n\n"; bars = 20
        for point in route: visualization += f"‚úÖ {point['city']} - –¥–µ–Ω—å {point['day']}\n" if point['progress'] <= progress else f"‚è≥ {point['city']} - –¥–µ–Ω—å {point['day']}\n"
        filled = int(progress / 100 * bars); progress_bar = "üü¢" * filled + "‚ö™" * (bars - filled)
        visualization += f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%\n{progress_bar}\n"
        return visualization
    def calculate_estimated_arrival(self, shipment):
        created_at = shipment.get('created_at', datetime.now())
        if isinstance(created_at, str): created_at = datetime.fromisoformat(created_at)
        if shipment.get('status') == '–¥–æ—Å—Ç–∞–≤–ª–µ–Ω': return "‚úÖ –ì—Ä—É–∑ —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω"
        current_progress = shipment.get('route_progress', 0); total_days = 15 # –ú–∞–∫—Å. –≤—Ä–µ–º—è
        if current_progress >= 100: return "üïí –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è"
        days_passed = (datetime.now() - created_at).days
        if days_passed >= total_days: return "üïí –°–∫–æ—Ä–æ –ø—Ä–∏–±—ã—Ç–∏–µ"
        days_left = max(1, total_days - days_passed); estimated_date = datetime.now() + timedelta(days=days_left)
        return f"üìÖ {estimated_date.strftime('%d.%m.%Y')} (–æ–∫–æ–ª–æ {days_left} –¥–Ω–µ–π)"
    def get_shipment_info(self, track_number):
        shipment = self.get_shipment_data_from_db(track_number)
        if not shipment: return None
        status_emoji = {"–ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ": "üè≠", "–≤ –ø—É—Ç–∏ –¥–æ –≥—Ä–∞–Ω–∏—Ü—ã": "üöö", "–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ": "üõÉ", "–≤ –ø—É—Ç–∏ –¥–æ –∞–ª–º–∞—Ç—ã": "üöõ", "–ø—Ä–∏–±—ã–ª –≤ –∞–ª–º–∞—Ç—ã": "üèôÔ∏è", "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω": "‚úÖ"}.get(shipment['status'], 'üì¶')
        response = f"üì¶ **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –í–ê–®–ï–ú –ì–†–£–ó–ï**\n\nüî¢ **–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä:** {shipment['track_number']}\nüë§ **–ü–æ–ª—É—á–∞—Ç–µ–ª—å:** {shipment.get('fio', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\nüì¶ **–¢–æ–≤–∞—Ä:** {shipment.get('product', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n‚öñÔ∏è **–í–µ—Å:** {shipment.get('weight', 0)} –∫–≥\nüìè **–û–±—ä–µ–º:** {shipment.get('volume', 0)} –º¬≥\n\nüîÑ **–°—Ç–∞—Ç—É—Å:** {status_emoji} {shipment['status']}\n\n"
        progress = shipment.get('route_progress', 0); warehouse_code = shipment.get('warehouse_code', 'GZ')
        response += self.create_route_visualization(warehouse_code, progress) + "\n"
        eta = self.calculate_estimated_arrival(shipment); response += f"‚è∞ **–ü—Ä–∏–º–µ—Ä–Ω–æ–µ –ø—Ä–∏–±—ã—Ç–∏–µ:** {eta}\n\n"
        response += "üí° _–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É_"
        return response
tracker = MultiWarehouseTracker()

# --- 8. –§–£–ù–ö–¶–ò–ò-–ü–ê–†–°–ï–†–´ (–û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---
# (–§—É–Ω–∫—Ü–∏–∏ extract_dimensions, extract_volume, extract_contact_info, check_dimensions_exceeded
# –û–°–¢–ê–Æ–¢–°–Ø –¢–û–ß–ù–û –¢–ê–ö–ò–ú–ò –ñ–ï, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ app.py)
def extract_dimensions(text):
    patterns = [r'(?:–≥–∞–±–∞—Ä–∏—Ç\w*|—Ä–∞–∑–º–µ—Ä\w*|–¥—à–≤|–¥–ª—à|—Ä–∞–∑–º)?\s*(\d+(?:[.,]\d+)?)\s*(?:—Å–º|cm|–º|m|—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä\w*|–º–µ—Ç—Ä\w*)?\s*[x—Ö*√ó–Ω–∞\s\-]+\s*(\d+(?:[.,]\d+)?)\s*(?:—Å–º|cm|–º|m|—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä\w*|–º–µ—Ç—Ä\w*)?\s*[x—Ö*√ó–Ω–∞\s\-]+\s*(\d+(?:[.,]\d+)?)\s*(?:—Å–º|cm|–º|m|—Å–∞–Ω—Ç–∏–º–µ—Ç—Ä\w*|–º–µ—Ç—Ä\w*)?']
    text_lower = text.lower()
    for pattern in patterns:
        matches = re.finditer(pattern, text_lower)
        for match in matches:
            try:
                l, w, h = [float(val.replace(',', '.')) for val in match.groups()]
                match_text = match.group(0).lower(); has_explicit_m = any(word in match_text for word in ['–º', 'm', '–º–µ—Ç—Ä'])
                is_cm = '—Å–º' in match_text or 'cm' in match_text or (l > 5 or w > 5 or h > 5) and not has_explicit_m
                if is_cm: l, w, h = l / 100, w / 100, h / 100
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω—ã –≥–∞–±–∞—Ä–∏—Ç—ã: {l:.3f}x{w:.3f}x{h:.3f} –º")
                return l, w, h
            except Exception: continue
    return None, None, None
def extract_volume(text):
    patterns = [r'(\d+(?:[.,]\d+)?)\s*(?:–∫—É–±\.?\s*–º|–º¬≥|–º3|–∫—É–±\.?|–∫—É–±–∏—á–µ—Å–∫\w+\s*–º–µ—Ç—Ä\w*|–∫—É–±–æ–º–µ—Ç—Ä\w*)', r'(?:–æ–±—ä–µ–º|volume)\w*\s*(\d+(?:[.,]\d+)?)\s*(?:–∫—É–±\.?\s*–º|–º¬≥|–º3|–∫—É–±\.?)?']
    text_lower = text.lower()
    for pattern in patterns:
        match = re.search(pattern, text_lower)
        if match:
            try:
                volume = float(match.group(1).replace(',', '.'))
                logger.info(f"–ò–∑–≤–ª–µ—á–µ–Ω –æ–±—ä–µ–º: {volume} –º¬≥")
                return volume
            except Exception: continue
    return None
def extract_contact_info(text):
    name, phone = None, None; clean_text = re.sub(r'\s+', ' ', text.strip()).lower()
    name_match = re.search(r'(?:–∏–º—è|–º–µ–Ω—è –∑–æ–≤—É—Ç|–∑–æ–≤—É—Ç)\s*[:\-]?\s*([–∞-—èa-z]{2,})', clean_text)
    if name_match: name = name_match.group(1).capitalize()
    phone_match = re.search(r'(\d{10,11})', clean_text.replace(r'\D', ''))
    if phone_match:
        phone_num = phone_match.group(1)
        if phone_num.startswith('8'): phone_num = '7' + phone_num[1:]
        if len(phone_num) == 10: phone_num = '7' + phone_num
        if len(phone_num) == 11: phone = phone_num
    if not name and phone: name_guess = clean_text.split(phone_match.group(1))[0].strip(' ,'); name = name_guess.capitalize() if name_guess and not name_guess.isdigit() else name
    if not name and not phone: match = re.search(r'([–∞-—èa-z]{2,})\s+(\d{10,11})', clean_text);
    if match: name = match.group(1).capitalize(); phone_num = match.group(2).replace(r'\D', ''); phone = ('7' + phone_num[1:] if phone_num.startswith('8') else ('7' + phone_num if len(phone_num) == 10 else (phone_num if len(phone_num) == 11 else phone)))
    return name, phone
MAX_DIMENSIONS = {'length': 2.3, 'width': 1.8, 'height': 1.1}
def check_dimensions_exceeded(length, width, height):
    if not length or not width or not height: return False
    return (length > MAX_DIMENSIONS['length'] or width > MAX_DIMENSIONS['width'] or height > MAX_DIMENSIONS['height'])

# --- 9. –§–£–ù–ö–¶–ò–ò –†–ê–°–ß–ï–¢–ê (–û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô, —Ç.–∫. —É–∂–µ —Ä–∞–±–æ—Ç–∞—é—Ç —Å –ë–î) ---
# (–§—É–Ω–∫—Ü–∏–∏ get_exchange_rate_from_db, get_destination_zone_from_db,
# find_product_category_from_db (—Å –ó–ê–ì–õ–£–®–ö–û–ô), get_t1_rate_from_db, get_t2_cost_from_db,
# calculate_quick_cost, calculate_detailed_cost –û–°–¢–ê–Æ–¢–°–Ø –¢–û–ß–ù–û –¢–ê–ö–ò–ú–ò –ñ–ï,
# –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ app.py)
def get_exchange_rate_from_db():
    data = query_db("SELECT value FROM settings WHERE key = 'exchange_rate'", fetch_one=True)
    return data[0] if data else 550
def get_destination_zone_from_db(city_name):
    sql = "SELECT zone FROM cities WHERE city_name = %s"; data = query_db(sql, (city_name.lower(),), fetch_one=True)
    if data: return data[0]
    sql_like = "SELECT zone FROM cities WHERE %s LIKE '%' || city_name || '%'" # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–∂–¥–µ–Ω–∏–µ
    data_like = query_db(sql_like, (city_name.lower(),), fetch_one=True)
    if data_like: logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –∑–æ–Ω–∞ (LIKE): {data_like[0]} –¥–ª—è {city_name}"); return data_like[0]
    logger.warning(f"–ó–æ–Ω–∞ –¥–ª—è {city_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î."); return None
def find_product_category_from_db(text): # –ó–ê–ì–õ–£–®–ö–ê
    logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ó–ê–ì–õ–£–®–ö–ê –¥–ª—è find_product_category_from_db")
    text_lower = text.lower();
    if any(k in text_lower for k in ["–º–µ–±–µ–ª—å", "–¥–∏–≤–∞–Ω", "—à–∫–∞—Ñ"]): return "–º–µ–±–µ–ª—å"
    if any(k in text_lower for k in ["—Ç–µ—Ö–Ω–∏–∫–∞", "—Ç–µ–ª–µ—Ñ–æ–Ω", "–Ω–æ—É—Ç–±—É–∫"]): return "—Ç–µ—Ö–Ω–∏–∫–∞"
    if any(k in text_lower for k in ["—Ç–∫–∞–Ω–∏", "–æ–¥–µ–∂–¥–∞", "–≤–µ—â–∏", "–∫—É—Ä—Ç–∫–∏"]): return "—Ç–∫–∞–Ω–∏"
    if any(k in text_lower for k in ["–∫–æ—Å–º–µ—Ç–∏–∫–∞", "–¥—É—Ö–∏", "–∫—Ä–µ–º"]): return "–∫–æ—Å–º–µ—Ç–∏–∫–∞"
    if any(k in text_lower for k in ["–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏", "–∑–∞–ø—á–∞—Å—Ç–∏", "—à–∏–Ω–∞"]): return "–∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏"
    return "–æ–±—â–∏–µ"
def get_t1_rate_from_db(product_type, weight, volume):
    if not volume or volume <= 0: logger.warning("–û–±—ä–µ–º 0, —Ä–∞—Å—á–µ—Ç T1 –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω."); return None, 0
    density = weight / volume; category = find_product_category_from_db(product_type)
    sql = "SELECT price, unit FROM t1_rates WHERE category_name = %s AND min_density <= %s ORDER BY min_density DESC LIMIT 1"
    rule = query_db(sql, (category, density), fetch_one=True)
    if rule: logger.info(f"–ù–∞–π–¥–µ–Ω T1 —Ç–∞—Ä–∏—Ñ (SQL): {rule[0]} {rule[1]} –¥–ª—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ {density:.1f}"); return {"price": rule[0], "unit": rule[1]}, density
    else: logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω T1 —Ç–∞—Ä–∏—Ñ (SQL) –¥–ª—è {category} / {density:.1f}"); rule_common = query_db(sql, ("–æ–±—â–∏–µ", density), fetch_one=True);
    if rule_common: logger.info(f"–ù–∞–π–¥–µ–Ω T1 —Ç–∞—Ä–∏—Ñ (SQL, –†–µ–∑–µ—Ä–≤–Ω—ã–π '–æ–±—â–∏–µ'): {rule_common[0]} {rule_common[1]}"); return {"price": rule_common[0], "unit": rule_common[1]}, density
    return None, density
def get_t2_cost_from_db(weight: float, zone: str):
    if zone == "–∞–ª–º–∞—Ç—ã": logger.warning("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¢2 –¥–ª—è –ê–ª–º–∞—Ç—ã (250 —Ç–≥/–∫–≥)"); return weight * 250
    extra_rate_data = query_db("SELECT extra_kg_rate FROM t2_rates_extra WHERE zone = %s", (zone,), fetch_one=True); extra_rate = extra_rate_data[0] if extra_rate_data else 300
    cost_column = f"zone_{zone}_cost"; sql_base = f"SELECT {cost_column} FROM t2_rates WHERE max_weight >= %s ORDER BY max_weight ASC LIMIT 1"
    base_cost_data = query_db(sql_base, (weight,), fetch_one=True)
    if base_cost_data and weight <= 20: return base_cost_data[0]
    elif weight > 20: sql_20kg = f"SELECT {cost_column} FROM t2_rates WHERE max_weight = 20"; base_20kg_data = query_db(sql_20kg, fetch_one=True); base_20kg_cost = base_20kg_data[0] if base_20kg_data else (20 * extra_rate); remaining_weight = weight - 20; total_t2_cost = base_20kg_cost + (remaining_weight * extra_rate); logger.info(f"–†–∞—Å—á–µ—Ç T2 (–ó–æ–Ω–∞ {zone}): {base_20kg_cost} (–±–∞–∑–∞ 20–∫–≥) + {remaining_weight}–∫–≥ * {extra_rate} = {total_t2_cost}"); return total_t2_cost
    else: return weight * extra_rate
def calculate_quick_cost(weight: float, product_type: str, city: str, volume: float = None, length: float = None, width: float = None, height: float = None):
    try:
        if not volume and length and width and height: volume = length * width * height
        if not volume or volume <= 0 or not weight or weight <= 0: logger.error("–í–µ—Å –∏–ª–∏ –æ–±—ä–µ–º –Ω–µ —É–∫–∞–∑–∞–Ω—ã, —Ä–∞—Å—á–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω."); return None
        EXCHANGE_RATE = get_exchange_rate_from_db(); rule, density = get_t1_rate_from_db(product_type, weight, volume)
        if not rule: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ T1 –∏–∑ –ë–î –¥–ª—è {product_type}"); return None
        price = rule['price']; unit = rule['unit']; cost_usd = price * weight if unit == "kg" else price * volume; t1_cost_kzt = cost_usd * EXCHANGE_RATE
        zone = get_destination_zone_from_db(city)
        if not zone: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–æ–Ω—É –¥–ª—è –≥–æ—Ä–æ–¥–∞: {city}"); return None
        t2_cost_kzt = get_t2_cost_from_db(weight, str(zone)); zone_name = f"–∑–æ–Ω–∞ {zone}" if zone != "–∞–ª–º–∞—Ç—ã" else "–∞–ª–º–∞—Ç—ã"
        total_cost = (t1_cost_kzt + t2_cost_kzt) * 1.20
        return {'t1_cost': t1_cost_kzt, 't2_cost': t2_cost_kzt, 'total': total_cost, 'zone': zone_name, 'volume': volume, 'density': density, 'rule': rule, 't1_cost_usd': cost_usd, 'length': length, 'width': width, 'height': height, 'EXCHANGE_RATE': EXCHANGE_RATE, 'product_type': product_type, 'city': city, 'weight': weight} # –î–æ–±–∞–≤–∏–ª–∏ product_type, city, weight
    except Exception as e: logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ calculate_quick_cost (SQL): {e}"); import traceback; logger.error(traceback.format_exc()); return None
# (–§—É–Ω–∫—Ü–∏—è calculate_detailed_cost –û–°–¢–ê–ï–¢–°–Ø –¢–û–ß–ù–û –¢–ê–ö–û–ô –ñ–ï, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ app.py)
def calculate_detailed_cost(quick_cost, weight: float, product_type: str, city: str):
    if not quick_cost: return "–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞"
    t1_cost = quick_cost['t1_cost']; t2_cost = quick_cost['t2_cost']; zone = quick_cost['zone']; volume = quick_cost['volume']; density = quick_cost['density']; rule = quick_cost['rule']; t1_cost_usd = quick_cost['t1_cost_usd']; EXCHANGE_RATE = quick_cost['EXCHANGE_RATE']
    price = rule['price']; unit = rule['unit']; calculation_text = f"${price}/–∫–≥ √ó {weight} –∫–≥ = ${t1_cost_usd:.2f} USD" if unit == "kg" else f"${price}/–º¬≥ √ó {volume:.3f} –º¬≥ = ${t1_cost_usd:.2f} USD"; city_name = city.capitalize()
    length = quick_cost.get('length'); width = quick_cost.get('width'); height = quick_cost.get('height')
    if check_dimensions_exceeded(length, width, height): t2_explanation = f"‚ùå **–í–∞—à –≥—Ä—É–∑ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏ 230√ó180√ó110 —Å–º**\n‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –¥–æ —Å–∫–ª–∞–¥–∞ –ê–ª–º–∞—Ç—ã (—Å–∞–º–æ–≤—ã–≤–æ–∑)"; t2_cost = 0; zone_text = "—Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≤—ã–≤–æ–∑"; comparison_text = f"üí° **–°–∞–º–æ–≤—ã–≤–æ–∑ —Å–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã:** {t1_cost * 1.20:.0f} —Ç–µ–Ω–≥–µ (–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é 20%)"; total_cost = t1_cost * 1.20
    else:
        if zone == "–∞–ª–º–∞—Ç—ã": t2_explanation = f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É –ê–ª–º–∞—Ç—ã –¥–æ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞"; zone_text = "–≥–æ—Ä–æ–¥ –ê–ª–º–∞—Ç—ã"; comparison_text = f"üí° **–ï—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ —Å–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã:** {t1_cost * 1.20:.0f} —Ç–µ–Ω–≥–µ (–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é 20%)"
        else: t2_explanation = f"‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –≤–∞—à–µ–≥–æ –∞–¥—Ä–µ—Å–∞ –≤ {city_name}"; zone_text = f"{zone}"; comparison_text = f"üí° **–ï—Å–ª–∏ —Å–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ –ê–ª–º–∞—Ç—ã:** {t1_cost * 1.20:.0f} —Ç–µ–Ω–≥–µ (–≤–∫–ª—é—á–∞—è –∫–æ–º–∏—Å—Å–∏—é 20%)"
        total_cost = (t1_cost + t2_cost) * 1.20
    response = (f"üìä **–î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è {weight} –∫–≥ ¬´{product_type}¬ª –≤ –≥. {city_name}:**\n\n**–¢1: –î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –¥–æ –ê–ª–º–∞—Ç—ã**\n‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –≥—Ä—É–∑–∞: **{density:.1f} –∫–≥/–º¬≥**\n‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω —Ç–∞—Ä–∏—Ñ –¢1: **${price} –∑–∞ {unit}**\n‚Ä¢ –†–∞—Å—á–µ—Ç: {calculation_text}\n‚Ä¢ –ü–æ –∫—É—Ä—Å—É {EXCHANGE_RATE} —Ç–µ–Ω–≥–µ/$ = **{t1_cost:.0f} —Ç–µ–Ω–≥–µ**\n\n**–¢2: –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏ ({zone_text})**\n{t2_explanation}\n‚Ä¢ –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π —Ç–∞—Ä–∏—Ñ –¥–ª—è {weight} –∫–≥ = **{t2_cost:.0f} —Ç–µ–Ω–≥–µ**\n\n**–ö–æ–º–∏—Å—Å–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ (20%):**\n‚Ä¢ ({t1_cost:.0f} + {t2_cost:.0f}) √ó 20% = **{(t1_cost + t2_cost) * 0.20:.0f} —Ç–µ–Ω–≥–µ**\n\n------------------------------------\nüí∞ **–ò–¢–û–ì–û —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–æ –¥–≤–µ—Ä–∏:** ‚âà **{total_cost:,.0f} —Ç–µ–Ω–≥–µ**\n\n{comparison_text}\n\nüí° **–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ:** –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ 1% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥—Ä—É–∑–∞\nüí≥ **–û–ø–ª–∞—Ç–∞:** –ø–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n\n‚úÖ **–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É?** –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω!\nüîÑ **–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç?** –ù–∞–ø–∏—à–∏—Ç–µ **–°—Ç–∞—Ä—Ç**")
    return response

# --- 10. –§–£–ù–ö–¶–ò–ò –°–¢–ê–¢–ò–ß–ï–°–ö–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò (–û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---
# (–§—É–Ω–∫—Ü–∏–∏ explain_tariffs, get_payment_info, get_delivery_procedure –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
def explain_tariffs(): return """üöö **–û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤:**\n\n**–¢1 - –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ —Å–∫–ª–∞–¥–∞ –≤ –ê–ª–º–∞—Ç—ã:**\n‚Ä¢ ... (–í–∞—à —Ç–µ–∫—Å—Ç)\n\n**–¢2 - –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –¥–≤–µ—Ä–∏:**\n‚Ä¢ ... (–í–∞—à —Ç–µ–∫—Å—Ç)"""
def get_payment_info(): return """üí≥ **–£—Å–ª–æ–≤–∏—è –æ–ø–ª–∞—Ç—ã:**\n\nüí∞ **–ü–æ—Å—Ç-–æ–ø–ª–∞—Ç–∞:** ... (–í–∞—à —Ç–µ–∫—Å—Ç)"""
def get_delivery_procedure(): return """üì¶ **–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∏:**\n\n1. **–ü—Ä–∏–µ–º –≥—Ä—É–∑–∞ –≤ –ö–∏—Ç–∞–µ:** ... (–í–∞—à —Ç–µ–∫—Å—Ç)"""

# --- 11. –§–£–ù–ö–¶–ò–Ø –°–û–•–†–ê–ù–ï–ù–ò–Ø –ó–ê–Ø–í–ö–ò (–û–°–¢–ê–ï–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô, —Ç.–∫. —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ë–î) ---
# (–§—É–Ω–∫—Ü–∏—è save_application_to_db –û–°–¢–ê–ï–¢–°–Ø –¢–û–ß–ù–û –¢–ê–ö–û–ô –ñ–ï, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ app.py)
def save_application_to_db(name, phone, details):
    sql = "INSERT INTO applications (timestamp, name, phone, details) VALUES (NOW(), %s, %s, %s)"
    success = execute_db(sql, (name, phone, details))
    if success: logger.info(f"–ó–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î: {name}, {phone}")
    else: logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ –ë–î: {name}")
    return success

# --- 12. –§–£–ù–ö–¶–ò–Ø GEMINI –î–õ–Ø –°–í–û–ë–û–î–ù–û–ì–û –î–ò–ê–õ–û–ì–ê (–û–°–¢–ê–ï–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---
# (–§—É–Ω–∫—Ü–∏—è get_gemini_response –û–°–¢–ê–ï–¢–°–Ø –¢–û–ß–ù–û –¢–ê–ö–û–ô –ñ–ï, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ app.py)
def get_gemini_response(user_message, history):
    if not base_model: return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ–π—á–∞—Å —è –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ."
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –º–æ–¥–µ–ª–∏
        gemini_history = []
        for i, msg in enumerate(history):
             # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å '–ö–ª–∏–µ–Ω—Ç:' –∏–ª–∏ '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:'
             if msg.startswith('–ö–ª–∏–µ–Ω—Ç: '):
                 gemini_history.append({'role': 'user', 'parts': [msg[len('–ö–ª–∏–µ–Ω—Ç: '):]]})
             elif msg.startswith('–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: '):
                 gemini_history.append({'role': 'model', 'parts': [msg[len('–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç: '):]]})
             else: # –ï—Å–ª–∏ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –Ω–µ—Ç, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ä–æ–ª—å –ø–æ —á–µ—Ç–Ω–æ—Å—Ç–∏/–Ω–µ—á–µ—Ç–Ω–æ—Å—Ç–∏
                 gemini_history.append({'role': 'user' if i % 2 == 0 else 'model', 'parts': [msg]})

        # –ù–∞—á–∏–Ω–∞–µ–º —á–∞—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        chat = base_model.start_chat(history=gemini_history)
        response = chat.send_message(
            f"{SYSTEM_INSTRUCTION}\n\n–í–æ–ø—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞: {user_message}\n\n–¢–≤–æ–π –æ—Ç–≤–µ—Ç:", # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            generation_config=GenerationConfig(max_output_tokens=1000, temperature=0.7),
            safety_settings={ # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
                HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
                HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
                HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
                HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
            }
        )
        return response.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ Gemini (—Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥): {e}")
        return "–û–π, –∫–∞–∂–µ—Ç—Å—è, —É –º–µ–Ω—è —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫! –î–∞–≤–∞–π—Ç–µ –≤–µ—Ä–Ω–µ–º—Å—è –∫ —Ä–∞—Å—á–µ—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏. üòä"

# --- 13. –ù–û–í–´–ô –ë–õ–û–ö: –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ GEMINI –ò –ò–• "–ü–ê–°–ü–û–†–¢–ê" ---
# (–ö–æ–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –∏—Ö "–ø–∞—Å–ø–æ—Ä—Ç–æ–≤" –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞)

# --- –§—É–Ω–∫—Ü–∏–∏-–æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ---
def calculate_delivery_cost_tool_wrapper(weight: float, product_type: str, city: str, volume: float = None, length: float = None, width: float = None, height: float = None):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è calculate_quick_cost, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è JSON-—Å—Ç—Ä–æ–∫—É —Å –°–õ–û–í–ê–†–ï–ú –†–ê–°–ß–ï–¢–ê."""
    logger.info(f"ü§ñ Tool –≤—ã–∑–≤–∞–ª calculate_delivery_cost —Å: w={weight}, p='{product_type}', c='{city}', v={volume}, l={length}, wi={width}, h={height}")
    try:
        # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –≥–∞–±–∞—Ä–∏—Ç–æ–≤ (–µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –≤ —Å–º)
        if length and length > 5: length /= 100
        if width and width > 5: width /= 100
        if height and height > 5: height /= 100
        
        # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á–µ—Ç–∞, —Ä–∞–±–æ—Ç–∞—é—â—É—é —Å –ë–î
        result_dict = calculate_quick_cost(weight, product_type, city, volume, length, width, height)
        if result_dict:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –°–õ–û–í–ê–†–¨ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫—É
            return json.dumps(result_dict, ensure_ascii=False)
        else:
            return json.dumps({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ (–≥–æ—Ä–æ–¥, —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞). –í–æ–∑–º–æ–∂–Ω–æ, –≥–æ—Ä–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∏–ª–∏ —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω."})
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ calculate_delivery_cost_tool_wrapper: {e}"); import traceback; logger.error(traceback.format_exc())
        return json.dumps({"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {e}"})

def track_shipment_tool_wrapper(track_number: str):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è tracker.get_shipment_info, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è JSON-—Å—Ç—Ä–æ–∫—É —Å –ì–û–¢–û–í–´–ú –¢–ï–ö–°–¢–û–ú."""
    logger.info(f"ü§ñ Tool –≤—ã–∑–≤–∞–ª track_shipment —Å: track='{track_number}'")
    try:
        # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à —Ç—Ä–µ–∫–µ—Ä, —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å –ë–î
        result_text = tracker.get_shipment_info(track_number)
        if result_text:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ì–û–¢–û–í–´–ô –¢–ï–ö–°–¢ –∫–∞–∫ JSON-—Å—Ç—Ä–æ–∫—É
            return json.dumps({"shipment_info_text": result_text}, ensure_ascii=False)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –∫ –ø–æ–∏—Å–∫—É
            prefixes = ['GZ', 'IY', 'SZ']
            found = False
            for prefix in prefixes:
                 if not track_number.upper().startswith(prefix):
                      test_track = prefix + track_number.upper()
                      result_text = tracker.get_shipment_info(test_track)
                      if result_text:
                          found = True
                          return json.dumps({"shipment_info_text": result_text}, ensure_ascii=False)
            if not found:
                 return json.dumps({"error": f"–ì—Ä—É–∑ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º {track_number} (–∏–ª–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ GZ/IY/SZ) –Ω–µ –Ω–∞–π–¥–µ–Ω."})
                 
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ track_shipment_tool_wrapper: {e}")
        return json.dumps({"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}"})

def save_application_tool_wrapper(name: str, phone: str, details: str = "–î–µ—Ç–∞–ª–∏ –∏–∑ —á–∞—Ç–∞"):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è save_application_to_db, –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è JSON —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º."""
    logger.info(f"ü§ñ Tool –≤—ã–∑–≤–∞–ª save_application —Å: name='{name}', phone='{phone}', details='{details}'")
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –µ—â–µ —Ä–∞–∑ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        extracted_name, extracted_phone = extract_contact_info(f"{name} {phone}")
        if not extracted_name or not extracted_phone:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏–∑: {name} {phone}")
             # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–ª Gemini
             final_name = name
             final_phone = phone # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –Ω–∞–¥–µ—è—Å—å –Ω–∞ Gemini
        else:
            final_name = extracted_name
            final_phone = extracted_phone

        # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        success = save_application_to_db(final_name, final_phone, details)
        if success:
            return json.dumps({"confirmation_text": f"üéâ –°–ø–∞—Å–∏–±–æ, {final_name}! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –ø–æ –Ω–æ–º–µ—Ä—É {final_phone} –≤ —Ä–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è (9:00-19:00 –ê—Å—Ç–∞–Ω–∞). üìû‚è∞"}, ensure_ascii=False)
        else:
            return json.dumps({"error": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."})
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ save_application_tool_wrapper: {e}")
        return json.dumps({"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}"})

def get_static_info_tool_wrapper(topic: str):
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–æ–ø–ª–∞—Ç–∞, —Ç–∞—Ä–∏—Ñ—ã, –ø—Ä–æ—Ü–µ–¥—É—Ä–∞)."""
    logger.info(f"ü§ñ Tool –≤—ã–∑–≤–∞–ª get_static_info —Å: topic='{topic}'")
    topic_lower = topic.lower()
    response_text = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ."
    try:
        if "–æ–ø–ª–∞—Ç" in topic_lower or "–ø–ª–∞—Ç–µ–∂" in topic_lower:
            response_text = get_payment_info()
        elif "—Ç–∞—Ä–∏—Ñ" in topic_lower or "—Ç1" in topic_lower or "—Ç2" in topic_lower:
            response_text = explain_tariffs()
        elif "–ø—Ä–æ—Ü–µ–¥—É—Ä" in topic_lower or "–ø—Ä–æ—Ü–µ—Å—Å" in topic_lower or "–¥–æ—Å—Ç–∞–≤–∫" in topic_lower:
            response_text = get_delivery_procedure()
        
        return json.dumps({"info_text": response_text}, ensure_ascii=False)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ get_static_info_tool_wrapper: {e}")
        return json.dumps({"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}"})

# --- –°–ª–æ–≤–∞—Ä—å –∏ "–ü–∞—Å–ø–æ—Ä—Ç–∞" –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ ---
available_tools = {
    "calculate_delivery_cost": calculate_delivery_cost_tool_wrapper,
    "track_shipment": track_shipment_tool_wrapper,
    "save_application": save_application_tool_wrapper,
    "get_static_info": get_static_info_tool_wrapper
}

tools_declaration = [
    genai.Tool(
        function_declarations=[
            # –ü–∞—Å–ø–æ—Ä—Ç 1: –†–∞—Å—á–µ—Ç –°—Ç–æ–∏–º–æ—Å—Ç–∏
            genai.FunctionDeclaration(
                name="calculate_delivery_cost",
                description="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≥—Ä—É–∑–∞ –∏–∑ –ö–∏—Ç–∞—è (–ì—É–∞–Ω—á–∂–æ—É/–ò–£) –≤ –≥–æ—Ä–æ–¥ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞. –¢—Ä–µ–±—É–µ—Ç –≤–µ—Å, —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞, –≥–æ—Ä–æ–¥ –ò (–æ–±—ä–µ–º –ò–õ–ò –≥–∞–±–∞—Ä–∏—Ç—ã –¥*—à*–≤). –ù–µ –≤—ã–∑—ã–≤–∞–π, –µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç!",
                parameters=genai.Schema(
                    type=genai.Type.OBJECT,
                    properties={
                        "weight": genai.Schema(type=genai.Type.NUMBER, description="–û–±—â–∏–π –≤–µ—Å –≥—Ä—É–∑–∞ –≤ –ö–ì (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)."),
                        "product_type": genai.Schema(type=genai.Type.STRING, description="–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä '–º–µ–±–µ–ª—å', '–æ–¥–µ–∂–¥–∞', '—Ç–µ—Ö–Ω–∏–∫–∞'. –ò—Å–ø–æ–ª—å–∑—É–π '–æ–±—â–∏–µ', –µ—Å–ª–∏ –Ω–µ—è—Å–Ω–æ."),
                        "city": genai.Schema(type=genai.Type.STRING, description="–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä '–ê—Å—Ç–∞–Ω–∞', '–ê–ª–º–∞—Ç—ã', '–ö–∞—Ä–∞–≥–∞–Ω–¥–∞'."),
                        "volume": genai.Schema(type=genai.Type.NUMBER, description="–û–±—â–∏–π –æ–±—ä–µ–º –≥—Ä—É–∑–∞ –≤ –º¬≥ (–∫—É–±–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∞—Ö). –£–∫–∞–∑—ã–≤–∞—Ç—å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –ò–ó–í–ï–°–¢–ï–ù —Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º."),
                        "length": genai.Schema(type=genai.Type.NUMBER, description="–î–ª–∏–Ω–∞ –û–î–ù–û–ì–û –º–µ—Å—Ç–∞ –≥—Ä—É–∑–∞ –≤ –º–µ—Ç—Ä–∞—Ö –ò–õ–ò —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–µ—Å–ª–∏ –æ–±—ä–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω). –£–∫–∞–∑—ã–≤–∞—Ç—å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ volume –Ω–µ —É–∫–∞–∑–∞–Ω."),
                        "width": genai.Schema(type=genai.Type.NUMBER, description="–®–∏—Ä–∏–Ω–∞ –û–î–ù–û–ì–û –º–µ—Å—Ç–∞ –≥—Ä—É–∑–∞ –≤ –º–µ—Ç—Ä–∞—Ö –ò–õ–ò —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–µ—Å–ª–∏ –æ–±—ä–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω). –£–∫–∞–∑—ã–≤–∞—Ç—å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ volume –Ω–µ —É–∫–∞–∑–∞–Ω."),
                        "height": genai.Schema(type=genai.Type.NUMBER, description="–í—ã—Å–æ—Ç–∞ –û–î–ù–û–ì–û –º–µ—Å—Ç–∞ –≥—Ä—É–∑–∞ –≤ –º–µ—Ç—Ä–∞—Ö –ò–õ–ò —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–µ—Å–ª–∏ –æ–±—ä–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω). –£–∫–∞–∑—ã–≤–∞—Ç—å –¢–û–õ–¨–ö–û –µ—Å–ª–∏ volume –Ω–µ —É–∫–∞–∑–∞–Ω.")
                    },
                    required=["weight", "product_type", "city"] # –û–±—ä–µ–º/–≥–∞–±–∞—Ä–∏—Ç—ã Gemini –¥–æ–ª–∂–µ–Ω –∏–∑–≤–ª–µ—á—å –∏ –ø–µ—Ä–µ–¥–∞—Ç—å, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
                )
            ),
            # –ü–∞—Å–ø–æ—Ä—Ç 2: –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ì—Ä—É–∑–∞
            genai.FunctionDeclaration(
                name="track_shipment",
                description="–û—Ç—Å–ª–µ–¥–∏—Ç—å –≥—Ä—É–∑ –ø–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä—É –∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –º–∞—Ä—à—Ä—É—Ç. –¢—Ä–µ–±—É–µ—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä.",
                parameters=genai.Schema(
                    type=genai.Type.OBJECT,
                    properties={ "track_number": genai.Schema(type=genai.Type.STRING, description="–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ), –Ω–∞–ø—Ä–∏–º–µ—Ä GZ123456, IY789012.") },
                    required=["track_number"]
                )
            ),
             # –ü–∞—Å–ø–æ—Ä—Ç 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ó–∞—è–≤–∫–∏
            genai.FunctionDeclaration(
                name="save_application",
                description="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ –∏ –Ø–í–ù–û–ì–û —Å–æ–≥–ª–∞—Å–∏—è –∫–ª–∏–µ–Ω—Ç–∞. –¢—Ä–µ–±—É–µ—Ç –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω.",
                parameters=genai.Schema(
                    type=genai.Type.OBJECT,
                    properties={
                        "name": genai.Schema(type=genai.Type.STRING, description="–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)."),
                        "phone": genai.Schema(type=genai.Type.STRING, description="–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)."),
                        "details": genai.Schema(type=genai.Type.STRING, description="–ö—Ä–∞—Ç–∫–∏–µ –¥–µ—Ç–∞–ª–∏ —Ä–∞—Å—á–µ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä '50–∫–≥ –º–µ–±–µ–ª—å –≤ –ê—Å—Ç–∞–Ω—É').")
                    },
                    required=["name", "phone"]
                )
            ),
            # –ü–∞—Å–ø–æ—Ä—Ç 4: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            genai.FunctionDeclaration(
                name="get_static_info",
                description="–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª–æ–≤–∏—è—Ö –æ–ø–ª–∞—Ç—ã, –ø—Ä–æ—Ü–µ–¥—É—Ä–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏ —Ç–∞—Ä–∏—Ñ–æ–≤.",
                parameters=genai.Schema(
                    type=genai.Type.OBJECT,
                    properties={
                        "topic": genai.Schema(type=genai.Type.STRING, description="–¢–µ–º–∞ –∑–∞–ø—Ä–æ—Å–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ): '–æ–ø–ª–∞—Ç–∞', '—Ç–∞—Ä–∏—Ñ—ã' –∏–ª–∏ '–ø—Ä–æ—Ü–µ–¥—É—Ä–∞'.")
                    },
                    required=["topic"]
                )
            ),
        ]
    )
]

# --- 14. –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ú–û–î–ï–õ–ò –° –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–ú–ò ---
model_with_tools = None
try:
    if base_model: # –ï—Å–ª–∏ –±–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        model_with_tools = genai.GenerativeModel(
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –±–∞–∑–æ–≤—É—é –º–æ–¥–µ–ª—å
            model_name=base_model.model_name,
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            system_instruction=SYSTEM_INSTRUCTION,
            tools=tools_declaration,
            safety_settings={ # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ —Ç–æ–∂–µ
                HarmCategory.HARM_CATEGORY_HATE_SPEECH: HarmBlockThreshold.BLOCK_NONE,
                HarmCategory.HARM_CATEGORY_HARASSMENT: HarmBlockThreshold.BLOCK_NONE,
                HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT: HarmBlockThreshold.BLOCK_NONE,
                HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT: HarmBlockThreshold.BLOCK_NONE,
            }
        )
        logger.info(">>> –ú–æ–¥–µ–ª—å Gemini –° –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê–ú–ò —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    else:
        logger.error("!!! –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å Gemini –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã.")
except Exception as e:
    logger.error(f"!!! –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏: {e}")


# --- 15. –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö /chat (–ò–°–ü–û–õ–¨–ó–£–ï–¢ TOOLS) ---
@app.route('/chat', methods=['POST'])
def chat():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–æ–¥–µ–ª–∏
    if not model_with_tools:
        return jsonify({"response": "‚ö†Ô∏è –û—à–∏–±–∫–∞: –ú–æ–¥–µ–ª—å –ò–ò (Tools) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞."}), 500
        
    try:
        user_message = request.json.get('message', '').strip()
        if not user_message:
            return jsonify({"response": "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."})

        # –ö–æ–º–∞–Ω–¥–∞ –°–±—Ä–æ—Å–∞ / –°—Ç–∞—Ä—Ç (–û–°–¢–ê–í–õ–Ø–ï–ú –î–õ–Ø –£–î–û–ë–°–¢–í–ê)
        if user_message.lower() in ['—Å—Ç–∞—Ä—Ç', 'start', '—Å–±—Ä–æ—Å', '–Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç']:
            logger.info(">>> –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –°–¢–ê–†–¢/–°–ë–†–û–°.")
            # –ü—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, Gemini —Å–∞–º –Ω–∞—á–Ω–µ—Ç –¥–∏–∞–ª–æ–≥ –∑–∞–Ω–æ–≤–æ
            return jsonify({"response": "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç!\n\nüì¶ **–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:**\n‚Ä¢ **–í–µ—Å** (–∫–≥)\n‚Ä¢ **–¢–∏–ø —Ç–æ–≤–∞—Ä–∞** (–º–µ–±–µ–ª—å, —Ç–µ—Ö–Ω–∏–∫–∞...)\n‚Ä¢ **–ì–∞–±–∞—Ä–∏—Ç—ã** (–î√ó–®√ó–í) –∏–ª–∏ **–û–±—ä–µ–º** (–º¬≥)\n‚Ä¢ **–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏**\n\nüí° *–ò–ª–∏* –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≥—Ä—É–∑."})

        logger.info(f"=== –ù–û–í–´–ô –ó–ê–ü–†–û–° (TOOLS): {user_message} ===")
        
        # --- –ò–°–¢–û–†–ò–Ø –ß–ê–¢–ê (–ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞, –ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–∞—è) ---
        # –ú—ã –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º Flask session. –ò—Å—Ç–æ—Ä–∏—é –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑.
        # –î–ª—è –ü–†–û–°–¢–û–¢–´ –ø–æ–∫–∞ –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –ë–ï–ó –∏—Å—Ç–æ—Ä–∏–∏ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏.
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤ –ë–î –ø–æ user_id (–∏–∑ WhatsApp/Telegram).
        chat_history_for_gemini = [] # –ü—É—Å—Ç–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞

        # --- –ó–ê–ü–£–°–ö –ê–ì–ï–ù–¢–ê ---
        chat_session = model_with_tools.start_chat(
             history=chat_history_for_gemini
             # enable_automatic_function_calling=True # –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å
        )
        last_successful_tool_result = None # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        last_tool_name = None

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –º–æ–¥–µ–ª–∏
        response = chat_session.send_message(user_message)

        # --- –ì–õ–ê–í–ù–´–ô –¶–ò–ö–õ –û–ë–†–ê–ë–û–¢–ö–ò –í–´–ó–û–í–û–í –§–£–ù–ö–¶–ò–ô ---
        while response.candidates[0].content.parts[0].function_call:
            function_call = response.candidates[0].content.parts[0].function_call
            function_name = function_call.name
            args_dict = {key: value for key, value in function_call.args.items()}
            logger.info(f"ü§ñ –ê–≥–µ–Ω—Ç —Ä–µ—à–∏–ª –≤—ã–∑–≤–∞—Ç—å: {function_name} —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {args_dict}")

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –ù–ê–®–£ —Ñ—É–Ω–∫—Ü–∏—é-–æ–±–µ—Ä—Ç–∫—É
            if function_name in available_tools:
                function_to_call = available_tools[function_name]
                try:
                    api_response_json_str = function_to_call(**args_dict)
                    logger.info(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç JSON –æ—Ç {function_name}: {api_response_json_str}")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –£–°–ü–ï–®–ù–û–ì–û –≤—ã–∑–æ–≤–∞
                    last_successful_tool_result = json.loads(api_response_json_str) # –ü–∞—Ä—Å–∏–º JSON
                    last_tool_name = function_name
                except TypeError as te:
                     logger.error(f"‚ùå –û—à–∏–±–∫–∞ TypeError –ø—Ä–∏ –≤—ã–∑–æ–≤–µ {function_name}: {te}. Args: {args_dict}")
                     api_response_json_str = json.dumps({"error": f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è {function_name}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö."})
                     last_successful_tool_result = None # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ
                     last_tool_name = None
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è {function_name}: {e}"); import traceback; logger.error(traceback.format_exc())
                    api_response_json_str = json.dumps({"error": f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ {function_name}."})
                    last_successful_tool_result = None
                    last_tool_name = None
            else:
                logger.error(f"‚ö†Ô∏è –ú–æ–¥–µ–ª—å –ø–æ–ø—ã—Ç–∞–ª–∞—Å—å –≤—ã–∑–≤–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é: {function_name}")
                api_response_json_str = json.dumps({"error": f"–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {function_name}."})
                last_successful_tool_result = None
                last_tool_name = None

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –†–ï–ó–£–õ–¨–¢–ê–¢ —Ä–∞–±–æ—Ç—ã –Ω–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –û–ë–†–ê–¢–ù–û –º–æ–¥–µ–ª–∏
            response = chat_session.send_message(
                genai.Part(
                    function_response=genai.FunctionResponse(
                        name=function_name,
                        response={"result": api_response_json_str} # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                    )
                )
            )

        # --- –ö–û–ù–ï–¶ –¶–ò–ö–õ–ê ---

        # --- –û–ë–†–ê–ë–û–¢–ö–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–¢–í–ï–¢–ê ---
        final_response_text = response.text
        logger.info(f"üí¨ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç Gemini (–¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏): {final_response_text}")

        # --- –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø –†–ê–°–ß–ï–¢–ê –°–¢–û–ò–ú–û–°–¢–ò ---
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º —É—Å–ø–µ—à–Ω—ã–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º –±—ã–ª —Ä–∞—Å—á–µ—Ç, –ò–°–ü–û–õ–¨–ó–£–ï–ú –î–ï–¢–ê–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢
        if last_tool_name == "calculate_delivery_cost" and last_successful_tool_result and "error" not in last_successful_tool_result:
             logger.info("üõ†Ô∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –±—ã–ª —Ä–∞—Å—á–µ—Ç–æ–º, –≤—ã–∑—ã–≤–∞–µ–º calculate_detailed_cost...")
             # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–π –°–õ–û–í–ê–†–¨ quick_cost
             try:
                 # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è quick_cost
                 quick_cost_data = last_successful_tool_result
                 # –î–æ—Å—Ç–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ calculate_quick_cost
                 weight = quick_cost_data.get('weight')
                 product_type = quick_cost_data.get('product_type')
                 city = quick_cost_data.get('city')
                 
                 if weight and product_type and city:
                      detailed_text = calculate_detailed_cost(quick_cost_data, weight, product_type, city)
                      final_response_text = detailed_text # –ó–ê–ú–ï–ù–Ø–ï–ú –æ—Ç–≤–µ—Ç Gemini –Ω–∞ –Ω–∞—à –¥–µ—Ç–∞–ª—å–Ω—ã–π
                      logger.info("‚úÖ –î–µ—Ç–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω.")
                 else:
                      logger.warning("–ù–µ —Ö–≤–∞—Ç–∏–ª–æ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ quick_cost –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞.")
                      # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç Gemini, –æ–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç quick_cost
                 
             except Exception as e:
                 logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ calculate_detailed_cost –ø–æ—Å–ª–µ Tool: {e}")
                 # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç Gemini, –Ω–æ –ª–æ–≥–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

        # --- –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø –î–†–£–ì–ò–• –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í ---
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º –±—ã–ª —Ç—Ä–µ–∫–µ—Ä, –∑–∞—è–≤–∫–∞ –∏–ª–∏ –∏–Ω—Ñ–æ, –±–µ—Ä–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        elif last_tool_name == "track_shipment" and last_successful_tool_result and "shipment_info_text" in last_successful_tool_result:
            final_response_text = last_successful_tool_result["shipment_info_text"]
        elif last_tool_name == "save_application" and last_successful_tool_result and "confirmation_text" in last_successful_tool_result:
            final_response_text = last_successful_tool_result["confirmation_text"]
        elif last_tool_name == "get_static_info" and last_successful_tool_result and "info_text" in last_successful_tool_result:
            final_response_text = last_successful_tool_result["info_text"]
        elif last_successful_tool_result and "error" in last_successful_tool_result:
             # –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É, –ø–æ–ø—Ä–æ—Å–∏–º Gemini –µ–µ –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å
             error_message = last_successful_tool_result["error"]
             logger.warning(f"–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {error_message}")
             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É Gemini –¥–ª—è –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–∏—è (–∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥)
             history_for_error = chat_history_for_gemini + [
                 {'role': 'user', 'parts': [user_message]},
                 {'role': 'model', 'parts': [f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {error_message}. –°–æ–æ–±—â–∏ –æ–± —ç—Ç–æ–º –∫–ª–∏–µ–Ω—Ç—É –≤–µ–∂–ª–∏–≤–æ.']}
             ]
             final_response_text = get_gemini_response(f"–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π –æ—à–∏–±–∫—É: {error_message}", history_for_error)


        # --- –û–¢–ü–†–ê–í–ö–ê –û–¢–í–ï–¢–ê –ö–õ–ò–ï–ù–¢–£ ---
        logger.info(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: {final_response_text}")
        return jsonify({"response": final_response_text})

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ /chat (Tools): {e}")
        import traceback
        logger.error(f"–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞: {traceback.format_exc()}")
        return jsonify({"response": "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞ (–ê–≥–µ–Ω—Ç). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."}), 500

# --- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–æ—É—Ç—ã (@app.route('/'), @app.route('/health')) –û–°–¢–ê–Æ–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô ---
@app.route('/')
def index():
    return render_template('index.html')

@app.route('/health')
def health_check():
    return jsonify({"status": "healthy", "timestamp": datetime.now().isoformat()})

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    # –£–±–∏—Ä–∞–µ–º debug=True –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ –Ω–∞ Render
    app.run(host='0.0.0.0', port=port)