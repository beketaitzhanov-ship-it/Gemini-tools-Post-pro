# -*- coding: utf-8 -*-
import os
import json
import logging
from datetime import datetime, timedelta
from flask import Flask, render_template, request, jsonify, session
from flask_session import Session  
import redis                     
import google.generativeai as genai
import google.generativeai.types as genai_types
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

load_dotenv()
GEMINI_API_KEY = os.getenv("GOOGLE_API_KEY")

app = Flask(__name__)
# ===== –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–†–í–ï–†–ù–û–ô –°–ï–°–°–ò–ò (REDIS) =====
# 1. –ó–∞–≥—Ä—É–∂–∞–µ–º URL Redis –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379')

# 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
app.config['SESSION_TYPE'] = 'redis'
app.config['SESSION_PERMANENT'] = True
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(minutes=30) #
app.config['SESSION_USE_SIGNER'] = True # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å–µ—Å—Å–∏–∏ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
app.config['SESSION_REDIS'] = redis.from_url(REDIS_URL)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'postpro-secret-key-2024') #

# 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Flask-Session
Session(app)
# ===== –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ô–ö–ò –°–ï–°–°–ò–ò =====

# ===== –°–ò–°–¢–ï–ú–ê –ó–ê–ì–†–£–ó–ö–ò –° –ú–ù–û–ì–û–£–†–û–í–ù–ï–í–û–ô –û–¢–ö–ê–ó–û–£–°–¢–û–ô–ß–ò–í–û–°–¢–¨–Æ =====

class ConfigLoader:
    """–ö–ª–∞—Å—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    
    @staticmethod
    def load_config():
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π JSON"""
        try:
            if not os.path.exists('config.json'):
                logger.warning("‚ö†Ô∏è –§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                return None
            
            with open('config.json', 'r', encoding='utf-8') as f:
                config_data = json.load(f)
                logger.info("‚úÖ –§–∞–π–ª config.json —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
                return config_data
                
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ config.json: {e}")
            return None
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.json: {e}")
            return None

    @staticmethod
    def load_prompt_file(filename, description):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            if not os.path.exists(filename):
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω ({description})")
                return ""
            
            with open(filename, 'r', encoding='utf-8') as f:
                content = f.read().strip()
                if not content:
                    logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {filename} –ø—É—Å—Ç–æ–π ({description})")
                    return ""
                
                logger.info(f"‚úÖ {description} –∑–∞–≥—Ä—É–∂–µ–Ω")
                return content
                
        except UnicodeDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –≤ {filename}: {e}")
            return ""
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {filename}: {e}")
            return ""

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫
config = ConfigLoader.load_config()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç—ã —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –Ω–µ-None –∑–Ω–∞—á–µ–Ω–∏–π
PERSONALITY_PROMPT = ConfigLoader.load_prompt_file(
    'personality_prompt.txt', 
    '–ü—Ä–æ–º–ø—Ç –ª–∏—á–Ω–æ—Å—Ç–∏ –ê–π—Å—É–ª—É'
)

CALCULATION_PROMPT = ConfigLoader.load_prompt_file(
    'calculation_prompt.txt', 
    '–ü—Ä–æ–º–ø—Ç —Ä–∞—Å—á–µ—Ç–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏'
)

# –°–æ–∑–¥–∞–µ–º –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
def create_aisulu_prompt():
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
    base_prompt = ""
    
    # –î–æ–±–∞–≤–ª—è–µ–º personality_prompt –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if PERSONALITY_PROMPT:
        base_prompt += PERSONALITY_PROMPT + "\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º calculation_prompt –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if CALCULATION_PROMPT:
        base_prompt += CALCULATION_PROMPT + "\n\n"
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π fallback –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –æ–±–∞ —Ñ–∞–π–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if not base_prompt.strip():
        base_prompt = """–¢—ã - –ê–π—Å—É–ª—É, –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –≥—Ä—É–∑–æ–≤ –∏–∑ –ö–∏—Ç–∞—è –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω.
–ò—Å–ø–æ–ª—å–∑—É–π —Ñ—É–Ω–∫—Ü–∏—é calculate_delivery_cost –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏."""
        logger.warning("‚ö†Ô∏è –û–±–∞ –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –ø—Ä–æ–º–ø—Ç")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    base_prompt += """
# üéØ –§–ò–ù–ê–õ–¨–ù–´–ï –ò–ù–°–¢–†–£–ö–¶–ò–ò:

–¢—ã - –ê–π—Å—É–ª—É, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –≥—Ä—É–∑–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏ Post Pro.
–°–ª–µ–¥—É–π –ø—Ä–∞–≤–∏–ª–∞–º –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤.
–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ—Å—Ç–∞–≤–∫–µ –ù–ï–ú–ï–î–õ–ï–ù–ù–û –≤—ã–∑—ã–≤–∞–π —Ñ—É–Ω–∫—Ü–∏—é calculate_delivery_cost.
–í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–ª–∞–¥–∞—Ö –ì—É–∞–Ω—á–∂–æ—É –∏ –ò—É —Å —Å—Ä–æ–∫–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.
"""
    
    return base_prompt

AISULU_PROMPT = create_aisulu_prompt()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç None
try:
    if config:
        EXCHANGE_RATE = config.get("EXCHANGE_RATE", {}).get("rate", 550)
        DESTINATION_ZONES = config.get("DESTINATION_ZONES", {})
        T1_RATES_DENSITY = config.get("T1_RATES_DENSITY", {})
        T2_RATES = config.get("T2_RATES", {})
        T2_RATES_DETAILED = config.get("T2_RATES_DETAILED", {})
        PRODUCT_CATEGORIES = config.get("PRODUCT_CATEGORIES", {})
    else:
        # –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        logger.warning("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        EXCHANGE_RATE, DESTINATION_ZONES, T1_RATES_DENSITY, T2_RATES, T2_RATES_DETAILED, PRODUCT_CATEGORIES = 550, {}, {}, {}, {}, {}
        
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö: {e}")
    # Fallback –∑–Ω–∞—á–µ–Ω–∏—è
    EXCHANGE_RATE, DESTINATION_ZONES, T1_RATES_DENSITY, T2_RATES, T2_RATES_DETAILED, PRODUCT_CATEGORIES = 550, {}, {}, {}, {}, {}

# ===== –ò–ù–°–¢–†–£–ú–ï–ù–¢–´ –î–õ–Ø GEMINI =====
tools = [
    {
        "function_declarations": [
            {
                "name": "calculate_delivery_cost",
                "description": "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ö–∏—Ç–∞—è –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω –ø–æ –Ω–∞—à–∏–º —Ç–∞—Ä–∏—Ñ–∞–º",
                "parameters": {
                    "type": "OBJECT",
                    "properties": {
                        "weight_kg": {
                            "type": "NUMBER",
                            "description": "–û–±—â–∏–π –≤–µ—Å –≥—Ä—É–∑–∞ –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö"
                        },
                        "city": {
                            "type": "STRING", 
                            "description": "–ì–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ: –ê–ª–º–∞—Ç—ã, –ê—Å—Ç–∞–Ω–∞, –®—ã–º–∫–µ–Ω—Ç –∏ –¥—Ä."
                        },
                        "product_type": {
                            "type": "STRING",
                            "description": "–¢–∏–ø —Ç–æ–≤–∞—Ä–∞: –æ–¥–µ–∂–¥–∞, –º–µ–±–µ–ª—å, —Ç–µ—Ö–Ω–∏–∫–∞, –∫–æ—Å–º–µ—Ç–∏–∫–∞, –∞–≤—Ç–æ–∑–∞–ø—á–∞—Å—Ç–∏ –∏ —Ç.–¥."
                        },
                        "volume_m3": {
                            "type": "NUMBER",
                            "description": "–û–±—ä–µ–º –≥—Ä—É–∑–∞ –≤ –∫—É–±–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∞—Ö"
                        },
                        "length_m": {
                            "type": "NUMBER",
                            "description": "–î–ª–∏–Ω–∞ –≥—Ä—É–∑–∞ –≤ –º–µ—Ç—Ä–∞—Ö"
                        },
                        "width_m": {
                            "type": "NUMBER",
                            "description": "–®–∏—Ä–∏–Ω–∞ –≥—Ä—É–∑–∞ –≤ –º–µ—Ç—Ä–∞—Ö"
                        },
                        "height_m": {
                            "type": "NUMBER",
                            "description": "–í—ã—Å–æ—Ç–∞ –≥—Ä—É–∑–∞ –≤ –º–µ—Ç—Ä–∞—Ö"
                        }
                    },
                    "required": ["weight_kg", "city", "product_type"]
                }
            },
            {
                "name": "track_shipment",
                "description": "–û—Ç—Å–ª–µ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥—Ä—É–∑–∞ –ø–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä—É",
                "parameters": {
                    "type": "OBJECT",
                    "properties": {
                        "tracking_number": {
                            "type": "STRING",
                            "description": "–¢—Ä–µ–∫-–Ω–æ–º–µ—Ä –≥—Ä—É–∑–∞ (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å GZ, IY, SZ)"
                        }
                    },
                    "required": ["tracking_number"]
                }
            },
            {
                "name": "get_delivery_terms",
                "description": "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ä–æ–∫–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏"
            },
            {
                "name": "get_payment_methods", 
                "description": "–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã"
            },
            {
                "name": "save_customer_application",
                "description": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞",
                "parameters": {
                    "type": "OBJECT",
                    "properties": {
                        "name": {
                            "type": "STRING",
                            "description": "–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞"
                        },
                        "phone": {
                            "type": "STRING",
                            "description": "–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞ (10-11 —Ü–∏—Ñ—Ä)"
                        },
                        "details": {
                            "type": "STRING", 
                            "description": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ"
                        }
                    },
                    "required": ["name", "phone"]
                }
            }
        ]
    }
]

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø GEMINI –° –û–¢–ö–ê–ó–û–£–°–¢–û–ô–ß–ò–í–û–°–¢–¨–Æ =====
model = None
gemini_available = False

try:
    if GEMINI_API_KEY:
        genai.configure(api_key=GEMINI_API_KEY)
        model = genai.GenerativeModel('models/gemini-2.0-flash', tools=tools)
        gemini_available = True
        logger.info("‚úÖ –ú–æ–¥–µ–ª—å Gemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏")
    else:
        logger.warning("‚ö†Ô∏è GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
except Exception as e:
    logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {e}")
    gemini_available = False

# ===== –§–£–ù–ö–¶–ò–ò-–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –° –£–°–ò–õ–ï–ù–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö =====

def find_product_category(text):
    """–ü–æ–∏—Å–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
    try:
        if not text or not PRODUCT_CATEGORIES:
            return "–æ–±—â–∏–µ"
        
        text_lower = text.lower()
        for category, data in PRODUCT_CATEGORIES.items():
            keywords = data.get("keywords", [])
            for keyword in keywords:
                if keyword in text_lower:
                    return category
        return "–æ–±—â–∏–µ"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞: {e}")
        return "–æ–±—â–∏–µ"

def find_destination_zone(city_name):
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
    try:
        if not city_name or not DESTINATION_ZONES:
            return "5"
        
        city_lower = city_name.lower()
        if city_lower in DESTINATION_ZONES:
            return DESTINATION_ZONES[city_lower]
            
        for city, zone in DESTINATION_ZONES.items():
            if city in city_lower or city_lower in city:
                return zone
        return "5"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
        return "5"

def get_t1_rate_from_db(product_type, weight, volume):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ T1 —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if not volume or volume <= 0:
            return None, 0
            
        density = weight / volume
        category = find_product_category(product_type)
        rules = T1_RATES_DENSITY.get(category, T1_RATES_DENSITY.get("–æ–±—â–∏–µ", []))
        
        if not rules:
            return None, density
            
        for rule in sorted(rules, key=lambda x: x.get('min_density', 0), reverse=True):
            if density >= rule.get('min_density', 0):
                return rule, density
        return None, density
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞ T1: {e}")
        return None, 0

def get_t2_cost_from_db(weight, zone):
    """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ T2 —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫"""
    try:
        if not weight or weight <= 0:
            return 0
            
        if zone == "–∞–ª–º–∞—Ç—ã":
            return weight * T2_RATES.get("–∞–ª–º–∞—Ç—ã", 250)
            
        t2_detailed = T2_RATES_DETAILED.get("large_parcel", {})
        weight_ranges = t2_detailed.get("weight_ranges", [])
        extra_rates = t2_detailed.get("extra_kg_rate", {})
        
        if weight_ranges and extra_rates:
            extra_rate = extra_rates.get(zone, 300)
            base_cost = 0
            remaining_weight = weight
            
            for weight_range in weight_ranges:
                max_weight = weight_range.get("max", 0)
                zones = weight_range.get("zones", {})
                
                if weight <= max_weight:
                    base_cost = zones.get(zone, 3000)
                    remaining_weight = 0
                    break
                elif weight > 20 and max_weight == 20:
                    base_cost = zones.get(zone, 4200)
                    remaining_weight = weight - 20
                    
            if remaining_weight > 0:
                base_cost += remaining_weight * extra_rate
                
            return base_cost
        else:
            return weight * T2_RATES.get(zone, 300)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –¢2: {e}")
        return weight * 300

def calculate_quick_cost(weight, product_type, city, volume=None, length=None, width=None, height=None):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not weight or weight <= 0:
            return {"error": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–µ—Å –≥—Ä—É–∑–∞"}
        if not product_type:
            return {"error": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞"}
        if not city:
            return {"error": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –≥–æ—Ä–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏"}
        
        # –†–∞—Å—á–µ—Ç –æ–±—ä–µ–º–∞
        calculated_volume = volume
        if not calculated_volume and length and width and height:
            if length > 0 and width > 0 and height > 0:
                calculated_volume = length * width * height
        
        if not calculated_volume or calculated_volume <= 0:
            return {"error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –æ–±—ä–µ–º. –£–∫–∞–∂–∏—Ç–µ –æ–±—ä–µ–º –∏–ª–∏ —Ä–∞–∑–º–µ—Ä—ã (–¥–ª–∏–Ω–∞, —à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞)."}
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ T1
        rule, density = get_t1_rate_from_db(product_type, weight, calculated_volume)
        if not rule:
            rule, density = get_t1_rate_from_db("–æ–±—â–∏–µ", weight, calculated_volume)
            if not rule:
                return {"error": f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –¥–ª—è –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ {density:.2f} –∫–≥/–º¬≥ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{product_type}'."}
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ T1
        price = rule.get('price', 0)
        unit = rule.get('unit', 'kg')
        
        if unit == "kg":
            cost_usd = price * weight
        else:
            cost_usd = price * calculated_volume
            
        current_rate = EXCHANGE_RATE
        t1_cost_kzt = cost_usd * current_rate
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ T2
        zone = find_destination_zone(city)
        if not zone:
            return {"error": "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–æ–Ω–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏"}
            
        t2_cost_kzt = get_t2_cost_from_db(weight, str(zone))
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –Ω–∞–¥–±–∞–≤–∫–æ–π 20%
        total_cost = (t1_cost_kzt + t2_cost_kzt) * 1.20
        
        return {
            'success': True,
            't1_cost_kzt': round(t1_cost_kzt),
            't2_cost_kzt': round(t2_cost_kzt),
            'total_cost_kzt': round(total_cost),
            'zone': f"–∑–æ–Ω–∞ {zone}" if zone != "–∞–ª–º–∞—Ç—ã" else "–∞–ª–º–∞—Ç—ã",
            'volume_m3': round(calculated_volume, 3),
            'density_kg_m3': round(density, 2),
            't1_cost_usd': round(cost_usd, 2),
            'product_type': product_type,
            'city': city,
            'weight_kg': weight
        }
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
        return {"error": f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {str(e)}"}

def process_tracking_request(tracking_number):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if not tracking_number:
            return {"error": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä"}
        
        track_data = {}
        try:
            if os.path.exists('guangzhou_track_data.json'):
                with open('guangzhou_track_data.json', 'r', encoding='utf-8') as f:
                    track_data = json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}")
        
        shipment = track_data.get(tracking_number)
        if shipment:
            status_emoji = {
                "–ø—Ä–∏–Ω—è—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ": "üè≠",
                "–≤ –ø—É—Ç–∏ –¥–æ –≥—Ä–∞–Ω–∏—Ü—ã": "üöö", 
                "–Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ": "üõÉ",
                "–≤ –ø—É—Ç–∏ –¥–æ –∞–ª–º–∞—Ç—ã": "üöõ",
                "–ø—Ä–∏–±—ã–ª –≤ –∞–ª–º–∞—Ç—ã": "üèôÔ∏è",
                "–¥–æ—Å—Ç–∞–≤–ª–µ–Ω": "‚úÖ"
            }.get(shipment.get('status'), 'üì¶')
            
            return {
                'success': True,
                'tracking_number': tracking_number,
                'recipient': shipment.get('fio', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'product': shipment.get('product', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'),
                'weight_kg': shipment.get('weight', 0),
                'volume_m3': shipment.get('volume', 0),
                'status': shipment.get('status', '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'),
                'status_emoji': status_emoji,
                'progress_percent': shipment.get('route_progress', 0)
            }
        else:
            return {"error": f"‚ùå –ì—Ä—É–∑ —Å —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä–æ–º {tracking_number} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {e}")
        return {"error": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥—Ä—É–∑–∞: {str(e)}"}

def save_application(name, phone, details=None):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ IO"""
    try:
        if not name or not phone:
            return {"error": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω—ã –∏–º—è –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω"}
        
        application_data = {
            'timestamp': datetime.now().isoformat(),
            'name': name.strip(),
            'phone': phone.strip(),
            'details': details.strip() if details else '–ó–∞—è–≤–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Ç-–±–æ—Ç–∞'
        }
        
        try:
            os.makedirs('data', exist_ok=True)
            applications_file = 'data/applications.json'
            applications = []
            
            if os.path.exists(applications_file):
                try:
                    with open(applications_file, 'r', encoding='utf-8') as f:
                        applications = json.load(f)
                except json.JSONDecodeError:
                    logger.warning("–§–∞–π–ª applications.json –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π")
                    applications = []
            
            applications.append(application_data)
            
            with open(applications_file, 'w', encoding='utf-8') as f:
                json.dump(applications, f, ensure_ascii=False, indent=2)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –≤ —Ñ–∞–π–ª: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
            
        return {
            'success': True,
            'message': f"‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç {name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞",
            'application_id': len(applications)
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
        return {"error": f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏: {str(e)}"}

def get_delivery_terms(warehouse=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π –¥–æ—Å—Ç–∞–≤–∫–∏ —Å fallback"""
    try:
        if warehouse and "–≥—É–∞–Ω—á–∂–æ—É" in warehouse.lower():
            return {
                'success': True,
                'warehouse': '–ì—É–∞–Ω—á–∂–æ—É',
                'route': '–ì—É–∞–Ω—á–∂–æ—É ‚Üí –ê–ª–º–∞—Ç—ã', 
                'transit_time_days': '10-14 –¥–Ω–µ–π',
                'total_time_days': '15-20 –¥–Ω–µ–π',
                'border_crossing': '–•–æ—Ä–≥–æ—Å'
            }
        else:
            return {
                'success': True,
                'general_terms': '–î–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –ö–∏—Ç–∞—è –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω',
                'transit_time_days': '10-20 –¥–Ω–µ–π',
                'customs_clearance': '2-3 –¥–Ω—è',
                'domestic_delivery': '1-4 –¥–Ω—è',
                'warehouses_info': '–£ –Ω–∞—Å –µ—Å—Ç—å —Å–∫–ª–∞–¥—ã –≤ –ì—É–∞–Ω—á–∂–æ—É –∏ –ò—É.'
            }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–æ–∫–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")
        return {"error": f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ä–æ–∫–∞—Ö: {str(e)}"}

def get_payment_methods():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã —Å fallback"""
    try:
        return {
            'success': True,
            'payment_methods': [
                '–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ (Kaspi, Halyk, Freedom Bank)',
                '–û–Ω–ª–∞–π–Ω-–æ–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π',
                'Alipay & WeChat Pay', 
                '–ù–∞–ª–∏—á–Ω—ã–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏',
                '–ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç –¥–ª—è –ò–ü –∏ —é—Ä.–ª–∏—Ü',
                '–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã (Bitcoin, USDT)',
                '–†–∞—Å—Å—Ä–æ—á–∫–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤'
            ]
        }
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {e}")
        return {"error": f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã: {str(e)}"}

def execute_tool_function(function_name, parameters):
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        if not function_name:
            return {"error": "‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏"}
            
        logger.info(f"üîß –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {function_name} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {parameters}")
        
        if function_name == "calculate_delivery_cost":
            return calculate_quick_cost(
                weight=parameters.get('weight_kg'),
                product_type=parameters.get('product_type'),
                city=parameters.get('city'),
                volume=parameters.get('volume_m3'),
                length=parameters.get('length_m'),
                width=parameters.get('width_m'),
                height=parameters.get('height_m')
            )
        
        elif function_name == "track_shipment":
            return process_tracking_request(parameters.get('tracking_number'))
        
        elif function_name == "get_delivery_terms":
            warehouse = parameters.get('warehouse') if parameters else None
            return get_delivery_terms(warehouse)
        
        elif function_name == "get_payment_methods":
            return get_payment_methods()
        
        elif function_name == "save_customer_application":
            return save_application(
                name=parameters.get('name'),
                phone=parameters.get('phone'), 
                details=parameters.get('details')
            )
        
        else:
            return {"error": f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {function_name}"}
            
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ {function_name}: {e}")
        return {"error": f"‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {str(e)}"}

# ===== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –° –£–°–ò–õ–ï–ù–ù–û–ô –û–¢–ö–ê–ó–û–£–°–¢–û–ô–ß–ò–í–û–°–¢–¨–Æ =====

def get_fallback_response(user_message):
    """Fallback –æ—Ç–≤–µ—Ç—ã –∫–æ–≥–¥–∞ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"""
    message_lower = user_message.lower()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤', '—Å–∞–ª–µ–º', 'hello', 'hi']):
        return "–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ! üå∏ –Ø –ê–π—Å—É–ª—É, –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –∏–∑ –ö–∏—Ç–∞—è –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å —Ä–∞—Å—á–µ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É."
    
    elif any(word in message_lower for word in ['–¥–æ—Å—Ç–∞–≤–∫', '–≥—Ä—É–∑', '–ø–æ—Å—á–∏—Ç–∞–π', '—Ä–∞—Å—á–µ—Ç', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '—Ç–∞—Ä–∏—Ñ']):
        return "üì¶ –î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –º–Ω–µ –Ω—É–∂–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥—Ä—É–∑–∞: –≤–µ—Å, –≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è, —Ç–∏–ø —Ç–æ–≤–∞—Ä–∞ –∏ –æ–±—ä–µ–º/—Ä–∞–∑–º–µ—Ä—ã. –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–∏—Å —Ä–∞—Å—á–µ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    
    elif any(word in message_lower for word in ['—Ç—Ä–µ–∫', '–æ—Ç—Å–ª–µ–¥–∏—Ç', '–Ω–æ–º–µ—Ä', 'track']):
        return "üìÆ –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥—Ä—É–∑–∞ –Ω—É–∂–µ–Ω —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä. –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–∏—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    
    elif any(word in message_lower for word in ['–∑–∞—è–≤–∫', '–∑–≤–æ–Ω–æ–∫', '–∫–æ–Ω—Ç–∞–∫—Ç', '—Å–≤—è–∂']):
        return "üìû –î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω—É–∂–Ω—ã –≤–∞—à–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω. –í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–∏—Å –∑–∞—è–≤–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
    
    else:
        return "üå∏ –ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º."

def get_aisulu_response_with_tools(user_message):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é"""
    
    # Fallback –µ—Å–ª–∏ Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
    if not gemini_available or not model:
        logger.warning("‚ö†Ô∏è Gemini –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback —Ä–µ–∂–∏–º")
        return get_fallback_response(user_message)
    
    try:
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        chat_history_raw = session.get('chat_history', [])
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Gemini
        messages = []
        
        # 1. –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
        messages.append({
            "role": "user",
            "parts": [{"text": AISULU_PROMPT}]
        })
        
        # Priming –æ—Ç–≤–µ—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–æ–ª–∏
        messages.append({
            "role": "model", 
            "parts": [{"text": "–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ! –Ø –ê–π—Å—É–ª—É. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üå∏"}]
        })
        
        # 2. –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
        for i in range(0, len(chat_history_raw), 2):
            if i < len(chat_history_raw):
                user_msg = chat_history_raw[i]
                if user_msg.startswith("–ö–ª–∏–µ–Ω—Ç: "):
                    messages.append({
                        "role": "user", 
                        "parts": [{"text": user_msg[8:]}] 
                    })
            
            if i + 1 < len(chat_history_raw):
                assistant_msg = chat_history_raw[i + 1]
                if assistant_msg.startswith("–ê–π—Å—É–ª—É: "):
                    messages.append({
                        "role": "model",
                        "parts": [{"text": assistant_msg[8:]}]
                    })
        
        # 3. –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({
            "role": "user",
            "parts": [{"text": user_message}]
        })

        # 4. –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ Gemini
        try:
            response = model.generate_content(
                messages,
                generation_config={'temperature': 0.7}
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini: {e}")
            return get_fallback_response(user_message)
        
        # 5. –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if not (hasattr(response, 'candidates') and response.candidates):
            logger.error("‚ùå –ù–µ—Ç candidates –≤ –æ—Ç–≤–µ—Ç–µ Gemini")
            return get_fallback_response(user_message)
            
        candidate = response.candidates[0]
        
        if not (hasattr(candidate, 'content') and candidate.content):
            logger.error("‚ùå –ù–µ—Ç content –≤ candidate")
            return get_fallback_response(user_message)
            
        if not (hasattr(candidate.content, 'parts') and candidate.content.parts):
            logger.error("‚ùå –ù–µ—Ç parts –≤ content")
            return get_fallback_response(user_message)
            
        part = candidate.content.parts[0]

        # –°—Ü–µ–Ω–∞—Ä–∏–π 1: Gemini –≤—ã–∑—ã–≤–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        if hasattr(part, 'function_call') and part.function_call:
            logger.info("ü§ñ Gemini –≤—ã–∑–≤–∞–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç...")
            function_call = part.function_call
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            tool_result = execute_tool_function(
                function_call.name,
                dict(function_call.args) if hasattr(function_call, 'args') else {}
            )
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ dict
            model_request_content = candidate.content
            
            # –°–æ–∑–¥–∞–Ω–∏–µ response content
            function_response_content = {
                "role": "function",
                "parts": [
                    {
                        "function_response": {
                            "name": function_call.name,
                            "response": json.dumps(tool_result) 
                        }
                    }
                ]
            }
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            updated_messages = messages + [model_request_content, function_response_content]
            
            try:
                final_response = model.generate_content(
                    updated_messages,
                    generation_config={'temperature': 0.7}
                )
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
                if (hasattr(final_response, 'candidates') and final_response.candidates and
                    hasattr(final_response.candidates[0], 'content') and final_response.candidates[0].content and
                    hasattr(final_response.candidates[0].content, 'parts') and final_response.candidates[0].content.parts and
                    hasattr(final_response.candidates[0].content.parts[0], 'text')):
                    
                    final_text = final_response.candidates[0].content.parts[0].text
                    return final_text
                else:
                    logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
                    return "‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –º–æ–≥—É –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –¥–µ—Ç–∞–ª–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è."
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                return "‚úÖ –†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."

        # –°—Ü–µ–Ω–∞—Ä–∏–π 2: Gemini –æ—Ç–≤–µ—á–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–º
        elif hasattr(part, 'text'):
            logger.info("ü§ñ Gemini –æ—Ç–≤–µ—Ç–∏–ª —Ç–µ–∫—Å—Ç–æ–º...")
            return part.text

        # –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞
        else:
            logger.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ Gemini")
            return get_fallback_response(user_message)
        
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ get_aisulu_response_with_tools: {e}")
        return get_fallback_response(user_message)

# ===== WEB –≠–ù–î–ü–û–ò–ù–¢–´ –° –£–°–ò–õ–ï–ù–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô –û–®–ò–ë–û–ö =====

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ —à–∞–±–ª–æ–Ω–∞"""
    try:
        return render_template('index.html')
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
        return """
        <html>
            <head><title>–ê–π—Å—É–ª—É - –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ</title></head>
            <body>
                <h1>–ê–π—Å—É–ª—É - –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ</h1>
                <p>–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
            </body>
        </html>
        """

@app.route('/chat', methods=['POST'])
def chat():
    """–û—Å–Ω–æ–≤–Ω–æ–π endpoint —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ—Ç–∫–∞–∑–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not request.json or 'message' not in request.json:
            return jsonify({"response": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞"}), 400

        user_message = request.json.get('message', '').strip()
        
        if not user_message:
            return jsonify({"response": "üìù –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})

        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {user_message}")

        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
        try:
            if 'chat_history' not in session:
                session['chat_history'] = []
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ —Å–µ—Å—Å–∏–∏
            session_backup = []

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–°—Ç–∞—Ä—Ç"
        if user_message.lower() in ['—Å—Ç–∞—Ä—Ç', 'start', '–Ω–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç', '—Å–±—Ä–æ—Å', '–±–∞—Å—Ç–∞']:
            try:
                session.clear()
                session['chat_history'] = []
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏: {e}")
                
            return jsonify({"response": """
üîÑ **–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑ –±–µ! –Ø –ê–π—Å—É–ª—É - –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –≤ –¥–æ—Å—Ç–∞–≤–∫–µ!** üå∏

ü§ñ **–Ø –ø–æ–º–æ–≥—É –≤–∞–º:**
üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –ö–∏—Ç–∞—è
üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –≥—Ä—É–∑ –ø–æ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä—É  
üíº –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
‚ùì –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –ª–æ–≥–∏—Å—Ç–∏–∫–µ

**–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ!** üòä
            """})

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ê–π—Å—É–ª—É
        response_text = get_aisulu_response_with_tools(user_message)

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        try:
            session['chat_history'].append(f"–ö–ª–∏–µ–Ω—Ç: {user_message}")
            session['chat_history'].append(f"–ê–π—Å—É–ª—É: {response_text}")
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
            if len(session['chat_history']) > 20:
                session['chat_history'] = session['chat_history'][-16:]
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

        return jsonify({"response": response_text})

    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return jsonify({"response": "‚ö†Ô∏è –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."}), 500

@app.route('/health')
def health_check():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    health_status = {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "components": {
            "gemini_configured": GEMINI_API_KEY is not None,
            "gemini_available": gemini_available,
            "config_loaded": config is not None,
            "model_initialized": model is not None,
            "personality_prompt_loaded": bool(PERSONALITY_PROMPT),
            "calculation_prompt_loaded": bool(CALCULATION_PROMPT),
            "aisulu_prompt_loaded": bool(AISULU_PROMPT.strip())
        },
        "file_checks": {
            "config.json": os.path.exists('config.json'),
            "personality_prompt.txt": os.path.exists('personality_prompt.txt'), 
            "calculation_prompt.txt": os.path.exists('calculation_prompt.txt')
        }
    }
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–∏–π —Å—Ç–∞—Ç—É—Å
    critical_components = [health_status["components"]["gemini_configured"]]
    if not all(critical_components):
        health_status["status"] = "degraded"
    
    return jsonify(health_status)

@app.errorhandler(404)
def not_found(error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫"""
    return jsonify({"error": "–≠–Ω–¥–ø–æ–∏–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

@app.errorhandler(500)
def internal_error(error):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ 500 –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå Internal Server Error: {error}")
    return jsonify({"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"}), 500

@app.errorhandler(Exception)
def handle_exception(error):
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π"""
    logger.error(f"‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {error}")
    return jsonify({"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞"}), 500

if __name__ == '__main__':
    # –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ê–π—Å—É–ª—É...")
    logger.info(f"üìä –°—Ç–∞—Ç—É—Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:")
    logger.info(f"  ‚úÖ Gemini API: {'–¥–æ—Å—Ç—É–ø–µ–Ω' if gemini_available else '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}")
    logger.info(f"  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'–∑–∞–≥—Ä—É–∂–µ–Ω–∞' if config else '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞'}")
    logger.info(f"  ‚úÖ –ü—Ä–æ–º–ø—Ç –ª–∏—á–Ω–æ—Å—Ç–∏: {'–∑–∞–≥—Ä—É–∂–µ–Ω' if PERSONALITY_PROMPT else '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}")
    logger.info(f"  ‚úÖ –ü—Ä–æ–º–ø—Ç —Ä–∞—Å—á–µ—Ç–æ–≤: {'–∑–∞–≥—Ä—É–∂–µ–Ω' if CALCULATION_PROMPT else '–Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω'}")
    logger.info(f"  ‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: {'—Å–æ–∑–¥–∞–Ω' if AISULU_PROMPT.strip() else '–Ω–µ —Å–æ–∑–¥–∞–Ω'}")
    
    port = int(os.environ.get('PORT', 5000))
    logger.info(f"üåê –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    try:
        app.run(debug=False, host='0.0.0.0', port=port)
    except Exception as e:
        logger.critical(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
